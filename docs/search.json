[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fire and Police Department Payroll",
    "section": "",
    "text": "1 Introduction\nMy experience in the financial industry has fostered a strong interest in working with high-volume salary datasets.\nFor this project, I will analyze 10 years of payroll data for the Fire and Police departments in New York City. This dataset represents a well-defined and comprehensive universe of information, making it ideal for thorough exploration and analysis.\nOne of the reasons I selected this dataset is its versatility; it includes a variety of data types such as categorical text with differing levels of granularity, numerical data, dates, and fields with missing or outlier values. These characteristics provide opportunities to practice a range of analytical techniques, from data cleaning to advanced visualizations for pattern discovery.\nSpecifically, I am interested in studying trends such as workforce growth, salary composition across different roles, and identifying the top-ranking positions and locations with the highest payroll activity. By delving into these questions, I aim to uncover meaningful insights into the structure and evolution of these essential public service departments. Let‚Äôs uncover the stories hidden in the data!\nüöí üíµ üöì",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2¬† Data",
    "section": "",
    "text": "2.1 Description\nData Metadata\nDataset Name\nCitywide Payroll Data (Fiscal Year)\n\n\nProvided by\nOffice of Payroll Administration (OPA)\n\n\nData Category\nCity Government\n\n\nFrequency of Updates\nAnnually\n\n\nDate Created\nOctober 31, 2015\n\n\nData Last Updated\nOctober 30, 2024\n\n\nDimensions\nRaw Data: 6,225,611 rows | 17 columns\nSubset Data: 804,630 rows | 17 columns\n\n\nEach row represents\nCity Employee Salary per Fiscal Year\n\n\nSource URL\nhttps://data.cityofnewyork.us/\nData Format\nColumn Name\nDescription\nData Type\n\n\n\n\nFiscal Year\nFiscal Year\nNumber\n\n\nPayroll Number\nPayroll Number\nNumber\n\n\nAgency Name\nThe Payroll agency that the employee works for\nText\n\n\nLast Name\nLast name of employee\nText\n\n\nFirst Name\nFirst name of employee\nText\n\n\nMid Init\nMiddle initial of employee\nText\n\n\nAgency Start Date\nDate which employee began working for their current agency\nTimestamp\n\n\nWork Location Borough\nBorough of employee's primary work location\nText\n\n\nTitle Description\nCivil service title description of the employee\nText\n\n\nLeave Status as of June 30\nStatus of employee as of the close of the relevant fiscal year: Active, Ceased, or On Leave\nText\n\n\nBase Salary\nBase Salary assigned to the employee\nNumber\n\n\nPay Basis\nLists whether the employee is paid on an hourly, per diem or annual basis\nText\n\n\nRegular Hours\nNumber of regular hours employee worked in the fiscal year\nNumber\n\n\nRegular Gross Paid\nThe amount paid to the employee for base salary during the fiscal year\nNumber\n\n\nOT Hours\nOvertime Hours worked by employee in the fiscal year\nNumber\n\n\nTotal OT Paid\nTotal overtime pay paid to the employee in the fiscal year\nNumber\n\n\nTotal Other Pay\nIncludes any compensation in addition to gross salary and overtime pay, i.e., Differentials, lump sums, uniform allowance, meal allowance, retroactive pay increases, settlement amounts, and bonus pay, if applicable.\nNumber\nData Source\nflowchart LR\n  A[Importing Data] --&gt; B[Understanding and \\n cleaning the raw data]\n  B --&gt; C(Transforming columns)\n  B --&gt; D(Filtering Data)\n  B --&gt; E(Backfilling NA)\n  C --&gt; F[Saving Subset Data]\n  D --&gt; F[Saving Subset Data]\n  E --&gt; F[Saving Subset Data]",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2¬† Data",
    "section": "",
    "text": "Importing the data\nCleaning the data\nCreating the final subset data\n\n\n\nTo access the data, we can go directly to the URL:\n\n\nhttps://data.cityofnewyork.us/City-Government/Citywide-Payroll-Data-Fiscal-Year-/k397-673e/about_data\n\nFrom this URL, you can click the button ‚ÄòExport‚Äô, and then select Download File-CSV format (All data 6225611 rows). This will download a file of about 840MB. Remember, we are using the data Last Updated on October 30, 2024.\nThe file will be downloaded with the name: Citywide_Payroll_Data__Fiscal_Year__YYYYMMDD.csv\n\n\n(YYYYMMDD refers to the date that you downloaded the file)\n\nOnce the data was downloaded, it was added to a new folder inside the repository called ‚Äòdata_source‚Äô.\n\n\nCode\n# import original data\npayroll_data_source &lt;- read.csv(\"./data_source/Citywide_Payroll_Data__Fiscal_Year__20241111.csv\")\n\n# make a copy of original data for transformations\npayroll_data &lt;- data.frame(payroll_data_source)\n\n# rename columns\nnames(payroll_data) &lt;- gsub(\"[\\\\.]+\", \"_\", tolower(names(payroll_data_source)))\n\n\n\n\n\n\n\nThe decision-making process for selecting a subset of the data and the detailed transformation and clean up of the original dataset with 6,225,611 rows to our final dataset with 804,630 rows can be found in the Appendix section.\n\n\n\n\n\nThe data used for this analysis is a subset of the entire raw data. The final subset data (focused on the Fire and Police departments) contains 804,630 rows out of the 6,225,611 rows from the original dataset.\nTo generate the final subset that will be used in the analysis, please run the code below:\n\n\nCode\n# `payroll_data` dataframe comes from the **Importing the data** section.\n\npayroll_data_fire_police &lt;-\n  payroll_data |&gt;\n  # clean agency name:\n  mutate(agency_name_clean = trimws(gsub(\"#\\\\d+$\", \"\", agency_name))) |&gt;\n  # clean job titles:\n  mutate(title_description = toupper(title_description)) |&gt; \n  # clean location name:\n  mutate(work_location_borough_clean = toupper(work_location_borough)) |&gt;\n\n  # filtering data:\n  filter(agency_name_clean %in%  c(\"POLICE DEPARTMENT\",\"FIRE DEPARTMENT\")) |&gt;\n  filter(work_location_borough_clean %in%   c(\"BRONX\", \"BROOKLYN\", \"MANHATTAN\", \"QUEENS\", \"RICHMOND\")) |&gt;\n  filter(fiscal_year &gt;= \"2015\" & fiscal_year &lt;= \"2024\") |&gt;\n  filter(pay_basis %in%   c(\"per Annum\", \"per Day\", \"per Hour\")) |&gt;\n\n  # backfill payroll number after filtering\n  mutate(\n    payroll_number_clean = case_when(\n      is.na(payroll_number) & agency_name_clean == \"FIRE DEPARTMENT\" ~ 57,\n      is.na(payroll_number) & agency_name_clean == \"POLICE DEPARTMENT\" ~ 56,\n      TRUE ~ payroll_number\n    )) |&gt;\n\n  # converting dates:\n  mutate(agency_start_date_clean = mdy(agency_start_date)) |&gt;\n\n  # renaming clean columns to original names:\n  mutate(\n    agency_name = agency_name_clean,\n    work_location_borough = work_location_borough_clean,\n    payroll_number = payroll_number_clean,\n    agency_start_date = agency_start_date_clean\n  ) |&gt;\n\n  # dropping clean columns\n  dplyr::select(-agency_name_clean,\n                -work_location_borough_clean,\n                -payroll_number_clean,\n                -agency_start_date_clean)\n\n\n\n# Please uncomment the CSV or the RDS method to save the subset data:\n\n# Save the data CSV\n# write.csv(payroll_data_fire_police, \"data_source/payroll_data_fire_police.csv\", row.names = FALSE)\n\n# Save the data RDS\n# saveRDS(payroll_data_fire_police, \"data_source/payroll_data_fire_police.rds\")\n\n# Read the data RDS\n# payroll_data_fire_police &lt;- readRDS(\"data_source/payroll_data_fire_police.rds\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2¬† Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nTo analyse missing data, we will classify our data in 4 categories:\n¬†¬†¬† ‚ñ† NA - any values equal to NA\n¬†¬†¬† ‚ñ† Blank - string values equal to ‚Äú‚Äù\n¬†¬†¬† ‚ñ† Zero - numeric values equal to 0\n¬†¬†¬† ‚ñ† Present - any values with data\n\nFirst, let‚Äôs check the missing values of the original dataset.\nUsing a sample of 1 million records (from 6.22 million rows) we have close to 4.5% of missing data classified as NA or Blank by the vis_miss() plot. We can also observe missing values in 7 columns*:\n\n\n\n3 columns related to a person‚Äôs name (first_name, mid_init, last_name)\npayroll_number\nwork_location_borough\ntitle_description\nagency_start_date\n\n\n\n(*based on the black highlights and the percentages listed in the column names)\n\n\nCode\npayroll_data_missing &lt;- \n  payroll_data |&gt;\n  sample_n(100000) |&gt;\n  mutate(across(everything(), ~ if_else(. == \"\", NA, .)))\n\npayroll_data_missing |&gt; \n  vis_miss(\n    sort_miss = TRUE,\n    # cluster = TRUE,\n    show_perc_col = TRUE,\n    warn_large_data = FALSE,\n    ) + \n  ggtitle(\"Missing Values (NA or Blank) - Original Data Sample\")+\n  theme(plot.margin = margin(r = 50))\n\n\n\n\n\n\n\n\n\n\nAfter transforming our original data to create our final subset data (Fire and Police Departments), we can now examine how the missing values from the original compares to the final dataset.\n\n\nCode\n#Data Transformation\n\npayroll_data_total_summary &lt;- payroll_data |&gt;\n  summarise(across(everything(), ~ n())) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Total Count\"\n  )\n\npayroll_data_na_summary &lt;- payroll_data |&gt;\n  summarise(across(everything(), ~ sum(is.na(.)))) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"NA\"\n  )\n\npayroll_data_blank_summary &lt;- payroll_data |&gt;\n  summarise(across(everything(), ~ sum(. == \"\", na.rm = TRUE))) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Blank\"\n  )\n\npayroll_data_zero_summary &lt;- payroll_data |&gt;\n  summarise(across(everything(), ~ sum(. == 0, na.rm = TRUE))) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Zero\"\n  )\n\npayroll_data_combined_summary &lt;- \n  payroll_data_total_summary |&gt; \n  inner_join(payroll_data_na_summary, by = \"Column\") |&gt; \n  inner_join(payroll_data_blank_summary, by = \"Column\") |&gt; \n  inner_join(payroll_data_zero_summary, by = \"Column\")\n\n\n# payroll_data_combined_summary\n\npayroll_data_combined_summary_likert &lt;-\npayroll_data_combined_summary |&gt; \n  mutate(`Present` = `Total Count` - `NA` - `Blank` - Zero) |&gt; \n  mutate(`Present` = `Present` / `Total Count`) |&gt; \n  mutate(`NA` = `NA` / `Total Count`) |&gt; \n  mutate(`Blank` = `Blank` / `Total Count`) |&gt; \n  mutate(`Zero` = Zero / `Total Count`) |&gt; \n  dplyr::select(`Column`,`NA`,`Blank`,Zero,`Present`) |&gt; \n  filter(!Column %in% c('agency_name_clean','work_location_borough_clean'))\n\n\nlikert_colors &lt;- c(\"NA\" = \"#D7191C\",\n                   \"Blank\" = \"#FDAE61\",\n                   \"Zero\" = \"#ABD9E9\",\n                   \"Present\" = \"#2C7BB6\")\n\n\n\npayroll_data_fire_police &lt;- readRDS(\"data_source/payroll_data_fire_police.rds\")\n\npayroll_data_fire_police_total_summary &lt;- payroll_data_fire_police |&gt;\n  summarise(across(everything(), ~ n())) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Total Count\"\n  )\n\npayroll_data_fire_police_na_summary &lt;- payroll_data_fire_police |&gt;\n  summarise(across(everything(), ~ sum(is.na(.)))) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"NA\"\n  )\n\npayroll_data_fire_police_blank_summary &lt;- payroll_data_fire_police |&gt;\n  summarise(across(everything(), ~ sum(. == \"\", na.rm = TRUE))) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Blank\"\n  )\n\npayroll_data_fire_police_zero_summary &lt;- payroll_data_fire_police |&gt;\n  summarise(across(everything(), ~ sum(. == 0, na.rm = TRUE))) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Zero\"\n  )\n\n\npayroll_data_fire_police_combined_summary &lt;- \n  payroll_data_fire_police_total_summary |&gt; \n  inner_join(payroll_data_fire_police_na_summary, by = \"Column\") |&gt; \n  inner_join(payroll_data_fire_police_blank_summary, by = \"Column\") |&gt; \n  inner_join(payroll_data_fire_police_zero_summary, by = \"Column\")\n\n\npayroll_data_fire_police_combined_summary_likert &lt;-\n  payroll_data_fire_police_combined_summary |&gt; \n  mutate(`Present` = `Total Count` - `NA` - `Blank` - Zero) |&gt; \n  mutate(`Present` = `Present` / `Total Count`) |&gt; \n  mutate(`NA` = `NA` / `Total Count`) |&gt; \n  mutate(`Blank` = `Blank` / `Total Count`) |&gt; \n  mutate(`Zero` = Zero / `Total Count`) |&gt; \n  dplyr::select(`Column`,`NA`,`Blank`,Zero,`Present`) |&gt; \n  filter(!Column %in% c('agency_name_clean','work_location_borough_clean'))\n\n\n\n\nCode\npayroll_data_missing_group_likert &lt;- bind_rows(\n  payroll_data_combined_summary_likert |&gt; mutate(group= 'Original Data'), \n  payroll_data_fire_police_combined_summary_likert |&gt; mutate(group= 'Final Subset Data')\n)\n\nHH::likert(x=Column~. | group,payroll_data_missing_group_likert, \n           positive.order=TRUE,\n           as.percent = T,\n           main = 'Missing Value Analysis',\n           xlab='Percentage',\n           ylab='Columns',\n           col = likert_colors,\n           ReferenceZero=2.5,\n           rightAxis=FALSE,\n           # xlimEqualLeftRight=TRUE,\n           xlim=c(-50,100),\n           )\n\n\n\n\n\n\n\n\n\nOur original dataset has ‚ñ† NA data for payroll_number, first_name, last_name. It also has ‚ñ† Blank data in 6 columns: first_name, mid_init, last_name, work_location_borough, title_description, agency_start_date.\nFor both datasets, ‚ñ† Zero values show up in columns related to the amount paid to a person, which can be 3 categories: regular, overtime, other. If a certain category is 0, it means the person did not receive any money for that category. This in an important information because it does not requires us to exclude or impute these values. We can observe a significant reduction of zero values in the subset dataset compared to the original.\nOur final subset data (Fire and Police Departments) no longer contains ‚ñ† NA data, but still contains ‚ñ† Blank data in 3 columns: first_name, mid_init, last_name.\nFor mid_init (Middle Name Initials), 29% of the data in the final subset is Blank, it is ok for us to have blanks in the data, this will not affect the future analysis. For first_name and last_name blank data (1.2% of the data in the final subset is Blank), these values are blank on purpose by the data provider:\n‚Ä¶As a part of FISA-OPA‚Äôs routine process for reviewing and releasing Citywide Payroll Data, data for some agencies (specifically NYC Police Department (NYPD) and the District Attorneys‚Äô Offices (Manhattan, Kings, Queens, Richmond, Bronx, and Special Narcotics)) have been redacted since they are exempt from disclosure pursuant to the Freedom of Information Law, POL ¬ß 87(2)(f), on the ground that disclosure of the information could endanger the life and safety of the public servants listed thereon‚Ä¶\nBased on this disclosure, we can confirm the Blank values for the names are part of the Police Department agency:\n\n\nCode\npayroll_data_fire_police |&gt; \n  filter(first_name == \"\" | last_name == \"\") |&gt; \n  group_by(agency_name) |&gt; \n  summarise(`Count of Blank Records` = n()) |&gt; \n  kable(col.names = c(\"Agency\", \"Count of Blank Records\")) \n\n\n\n\n\nAgency\nCount of Blank Records\n\n\n\n\nPOLICE DEPARTMENT\n9992",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3¬† Results",
    "section": "",
    "text": "3.1 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money",
    "href": "results.html#who-gets-the-money",
    "title": "3¬† Results",
    "section": "",
    "text": "Number of EmployeesAmount Paid per Year\n\n\n\n\nCode\n# Ensure fiscal_year is numeric\nsummarized_data &lt;- payroll_data_fire_police |&gt; \n  group_by(agency_name, fiscal_year, work_location_borough) |&gt; \n  summarise(\n    total_records = n(),\n    total_paid = sum(total_paid),\n    paid_per_person = sum(total_paid) / n(),\n    .groups = \"drop\"\n  ) |&gt; \n  mutate(fiscal_year = as.numeric(fiscal_year))\n\n\n# Calculate high-water mark and the corresponding year for each facet\nhigh_water_mark_records &lt;- summarized_data |&gt;\n  group_by(fiscal_year, agency_name) |&gt;\n  summarise(max_records = sum(total_records), .groups = \"drop\") |&gt;\n  group_by(agency_name) |&gt;\n  filter(max_records == max(max_records)) |&gt;\n  summarise(\n    fiscal_year = fiscal_year[1],  # Get the fiscal year for max records\n    max_records = max_records[1]  # Get the maximum record count\n  )\n\n\n\n# Plot\nggplot(summarized_data) +\n  geom_col(aes(x = fiscal_year, y = total_records, fill = work_location_borough)) +\n  \n  # Add horizontal dashed line at high water mark with color mapped to a new variable\n  geom_hline(\n    data = high_water_mark_records,\n    aes(yintercept = max_records, color = \"Highest value in 10 years\"),  # Map color to legend\n    # inherit.aes = FALSE,\n    linetype = \"dashed\"\n  ) +\n  \n  # Add text labels for high water marks\n  geom_text(\n    data = high_water_mark_records,\n    aes(\n      x = fiscal_year,\n      y = max_records,\n      label = paste0(\"Year: \", fiscal_year, \"\\n Employees: \", label_comma()(max_records))\n    ),\n    inherit.aes = FALSE,\n    color = \"black\",\n    vjust = -0.5,\n    hjust = 1,\n    size = 4\n  ) +\n  \n  # Add dots at high water marks\n  geom_point(\n    data = high_water_mark_records,\n    aes(x = fiscal_year, y = max_records),\n    inherit.aes = FALSE,\n    color = \"black\",   # Dot color\n    size = 3,        # Dot size\n    shape = 16       # Circle shape (default)\n  ) +\n  \n  # facet_wrap(~agency_name) \n  facet_wrap(~agency_name) +\n  \n  # Scale and labels for x-axis\n  scale_x_continuous(\n    breaks = seq(min(summarized_data$fiscal_year), max(summarized_data$fiscal_year), by = 1),\n    labels = function(x) format(as.Date(paste0(x, \"-01-01\")), \"%Y\")\n  ) +\n  \n  # Labels for title and axes\n  labs(\n    title = \"Employees by Fiscal Year\",\n    x = \"Fiscal Year\",\n    y = \"Number of Employees\",\n    fill = \"Location:\",\n    color = \"Reference Line:\"  # Add a label for the color legend\n  ) +\n  \n  # Y-axis settings\n  scale_y_continuous(\n    limits = c(0, NA),  # Keep lower bound at 0\n    labels = scales::label_number(scale = 1/1000, suffix = \"k\"),\n    expand = expansion(mult = c(0, 0.2))  # Add some padding for aesthetics\n  ) +\n  \n  # Set the colors for the fill based on boroughs\n  scale_fill_manual(\n    values = c(\n      \"BRONX\" = \"#FF595E\",\n      \"BROOKLYN\" = \"#FFCA3A\",\n      \"MANHATTAN\" = \"#8AC926\",\n      \"QUEENS\" = \"#1982C4\",\n      \"RICHMOND\" = \"#6A4C93\"\n    )\n  ) +\n  \n  # Set color for high water mark line\n  scale_color_manual(\n    values = c(\"Highest value in 10 years\" = \"black\")  # Color the reference line black\n  ) +\n  \n  # Minimal theme\n  theme_minimal() +\n  theme(\n    text = element_text(size = 14),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    legend.position = \"bottom\",\n    legend.box = \"vertical\"  #\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Ensure fiscal_year is numeric\nsummarized_data &lt;- payroll_data_fire_police |&gt; \n  group_by(agency_name, fiscal_year, work_location_borough) |&gt; \n  summarise(\n    total_records = n(),\n    total_paid = sum(total_paid),\n    paid_per_person = sum(total_paid) / n(),\n    .groups = \"drop\"\n  ) |&gt; \n  mutate(fiscal_year = as.numeric(fiscal_year))\n\n\n# Calculate high-water mark and the corresponding year for each facet\nhigh_water_mark_records &lt;- summarized_data |&gt;\n  group_by(fiscal_year, agency_name) |&gt;\n  summarise(max_records = sum(total_paid), .groups = \"drop\") |&gt;\n  group_by(agency_name) |&gt;\n  filter(max_records == max(max_records)) |&gt;\n  summarise(\n    fiscal_year = fiscal_year[1],  # Get the fiscal year for max records\n    max_records = max_records[1]  # Get the maximum record count\n  )\n\n\n\n# Plot\nggplot(summarized_data) +\n  geom_col(aes(x = fiscal_year, y = total_paid, fill = work_location_borough)) +\n  \n  # Add horizontal dashed line at high water mark with color mapped to a new variable\n  geom_hline(\n    data = high_water_mark_records,\n    aes(yintercept = max_records, color = \"Highest value in 10 years\"),  # Map color to legend\n    # inherit.aes = FALSE,\n    linetype = \"dashed\"\n  ) +\n  \n  # Add text labels for high water marks\n  geom_text(\n    data = high_water_mark_records,\n    aes(\n      x = fiscal_year,\n      y = max_records,\n      label = paste0(\"Year: \", fiscal_year, \"\\n Amount Paid: \", label_currency()(max_records/1000000000),\" Billions\")\n    ),\n    inherit.aes = FALSE,\n    color = \"black\",\n    vjust = -0.5,\n    hjust = 1,\n    size = 4\n  ) +\n  \n  # Add dots at high water marks\n  geom_point(\n    data = high_water_mark_records,\n    aes(x = fiscal_year, y = max_records),\n    inherit.aes = FALSE,\n    color = \"black\",   # Dot color\n    size = 3,        # Dot size\n    shape = 16       # Circle shape (default)\n  ) +\n  \n  # facet_wrap(~agency_name) \n  facet_wrap(~agency_name) +\n  \n  # Scale and labels for x-axis\n  scale_x_continuous(\n    breaks = seq(min(summarized_data$fiscal_year), max(summarized_data$fiscal_year), by = 1),\n    labels = function(x) format(as.Date(paste0(x, \"-01-01\")), \"%Y\")\n  ) +\n  \n  # Labels for title and axes\n  labs(\n    title = \"Amount Paid to Employees by Fiscal Year\",\n    x = \"Fiscal Year\",\n    y = \"Amount Paid to Employees\",\n    fill = \"Location:\",\n    color = \"Reference Line:\"  # Add a label for the color legend\n  ) +\n  \n  # Y-axis settings\n  scale_y_continuous(\n    limits = c(0, NA),  # Keep lower bound at 0\n    labels = scales::label_number(scale = 1/1000000000, suffix = \" B\"),\n    expand = expansion(mult = c(0, 0.2))  # Add some padding for aesthetics\n  ) +\n  \n  # Set the colors for the fill based on boroughs\n  scale_fill_manual(\n    values = c(\n      \"BRONX\" = \"#FF595E\",\n      \"BROOKLYN\" = \"#FFCA3A\",\n      \"MANHATTAN\" = \"#8AC926\",\n      \"QUEENS\" = \"#1982C4\",\n      \"RICHMOND\" = \"#6A4C93\"\n    )\n  ) +\n  \n  # Set color for high water mark line\n  scale_color_manual(\n    values = c(\"Highest value in 10 years\" = \"black\")  # Color the reference line black\n  ) +\n  \n  # Minimal theme\n  theme_minimal() +\n  theme(\n    text = element_text(size = 14),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    legend.position = \"bottom\",\n    legend.box = \"vertical\"  #\n  )",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money-1",
    "href": "results.html#who-gets-the-money-1",
    "title": "3¬† Results",
    "section": "3.2 Who gets the Money?",
    "text": "3.2 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.\n\n\nCode\nrange_band= 50000\n\npayroll_data_fire_police_test &lt;-\npayroll_data_fire_police |&gt; \n  filter(fiscal_year == 2024) |&gt;\n  # filter(title_description %in% c(\"POLICE OFFICER\",\"FIREFIGHTER\")) |&gt;\n  # filter(leave_status_as_of_june_30 == \"ACTIVE\") |&gt;\n   mutate(\n    flag_regular = ifelse(regular_gross_paid == 0, \"No\", \"Yes\"),\n    flag_overtime = ifelse(total_ot_paid == 0, \"No\", \"Yes\"),\n    flag_other = ifelse(total_other_pay == 0, \"No\", \"Yes\")\n  ) |&gt; \n    mutate(\n    # Define the range for breaks, including the floor of minimum to handle negative values\n    total_paid_group = cut(\n      total_paid,\n      breaks = seq(\n        floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, \n        ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,\n        by = range_band\n      ),\n      labels = paste0(\n        seq(\n          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, \n          ceiling(max(total_paid, na.rm = TRUE) / range_band - 1) * range_band,\n          by = range_band\n        ) / 1000,\n        \"k-\",\n        seq(\n          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band + range_band, \n          ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,\n          by = range_band\n        ) / 1000,\n        \"k\"\n      ),\n      include.lowest = TRUE,\n      right = FALSE\n    )\n  ) |&gt; \n  mutate(\n    total_paid_group = recode(\n      total_paid_group,\n      \"-200k--150k\" = \"Less than 0\",\n      \"-150k--100k\" = \"Less than 0\",\n      \"-100k--50k\" = \"Less than 0\",\n      \"-50k-0k\" = \"Less than 0\",\n      \"0k-50k\" = \"0k-50k\",\n      \"50k-100k\" = \"50k-100k\",\n      \"100k-150k\" = \"100k-150k\",\n      \"150k-200k\" = \"150k-200k\",\n      \"200k-250k\" = \"200k-250k\",\n      \"250k-300k\" = \"250k and above\",\n      \"300k-350k\" = \"250k and above\",\n      \"350k-400k\" = \"250k and above\",\n      \"400k-450k\" = \"250k and above\",\n      \"450k-500k\" = \"250k and above\",\n      \"500k-550k\" = \"250k and above\",\n      \"550k-600k\" = \"250k and above\",\n      \"600k-650k\" = \"250k and above\"\n    ),\n    total_paid_group = factor(total_paid_group, \n                              levels = c(\"250k and above\", \"200k-250k\", \n                                         \"150k-200k\", \"100k-150k\", \"50k-100k\", \n                                         \"0k-50k\", \"Less than 0\"))\n  ) |&gt; \n  mutate(\n    flag_regular = factor(flag_regular, levels = c(\"Yes\", \"No\")),\n    flag_overtime = factor(flag_overtime, levels = c(\"Yes\", \"No\")),\n  ) |&gt; \nmutate(\n    years_at_agency = 2024 - agency_start_date_year,  # Calculate the years worked\n    years_band = case_when(\n      years_at_agency &gt;= 0 & years_at_agency &lt;= 5 ~ \"0-5 years\",\n      years_at_agency &gt; 5 & years_at_agency &lt;= 10 ~ \"5-10 years\",\n      years_at_agency &gt; 10 & years_at_agency &lt;= 20 ~ \"10-20 years\",\n      years_at_agency &gt; 20 ~ \"20+ years\",\n      TRUE ~ \"Unknown\"  # In case of any missing or incorrect data\n    ),\n    years_band = factor(years_band, levels = c(\"20+ years\", \"10-20 years\", \"5-10 years\", \"0-5 years\"))\n  ) |&gt; \n  mutate(total_paid_group_fill = total_paid_group,\nyears_band_group = years_band)\n\n\n\npayroll_data_fire_police_pay_range_frequency &lt;- \n  payroll_data_fire_police_test |&gt; \n  # select(total_paid_group,flag_regular,flag_overtime,flag_other,agency_name,total_paid_group_fill) |&gt; \n  # select(flag_regular,flag_overtime,flag_other,total_paid_group,agency_name,total_paid_group_fill) |&gt;\n  # select(work_location_borough,flag_overtime,total_paid_group,agency_name,total_paid_group_fill) |&gt;\nselect(years_band,total_paid_group,agency_name,total_paid_group_fill,years_band_group,work_location_borough) |&gt;\n  group_by(across(everything())) |&gt; \n  summarise(frequency = n(), .groups = 'drop')\n\n# payroll_data_fire_police_pay_range_frequency &lt;-\n#   payroll_data_fire_police_pay_range_frequency |&gt; \n#   mutate(total_paid_group_fill = total_paid_group)\n\nessay_grades_frequency_lode = to_lodes_form(payroll_data_fire_police_pay_range_frequency, axes = 1:2)\nessay_grades_frequency_lode$x &lt;- factor(essay_grades_frequency_lode$x,\n                                        # labels = c(1,                                                   \"Total\")\n)\n\n\n\nlibrary(scales)\n\nessay_grades_frequency_lode &lt;- essay_grades_frequency_lode |&gt; \n  mutate(\n    stratum_width = ifelse(stratum == \"Total\", 2, 1) # Replace \"LastStratumName\" with the actual name\n  )\n\nggplot(essay_grades_frequency_lode, \n       aes(alluvium=alluvium, x=x, stratum=stratum, y=frequency)) +\n  # geom_flow(width = 0.5) +\n  # geom_alluvium(decreasing = TRUE)+\n  geom_alluvium(aes(fill = total_paid_group_fill), alpha = 0.8,\n                # width = 0.5\n                ) +\n  # geom_lode() +\n  \n  # geom_stratum(color = \"#00509d\",\n  #              fill='white',\n  #              linewidth = 1.5,\n  #              aes(fill = NA),\n  #              alpha = 0.5) +\n  geom_stratum(aes(fill = total_paid_group_fill),\n               # width = c(0.5,0.5,0.5,2),\n               # width = 0.7,\n               # width =ifelse(as.character(total_paid_group_fill) == 4, 3, NA),\n               # position = \"jitter\",\n               ) +\n   geom_label(stat = \"stratum\", \n              # aes(label = after_stat(stratum)),\n              aes(label = ifelse(as.numeric(x) != 2, as.character(stratum), NA) ),\n              size =3,\n              ) +\n  # geom_text(stat = \"stratum\",\n  #           aes(label = paste(after_stat(stratum)\n  #                             # ,                              \"\\n\" ,after_stat(count)\n  #                             )),\n  #            # aes(label = ifelse(as.numeric(x) != 4, as.character(stratum), NA) ),\n  #           hjust = 0.5,\n  #           size = 3\n  #           ) +\n  scale_fill_brewer(palette = \"Spectral\", direction = -1, na.translate = FALSE) +\n   scale_x_discrete(                   expand = c(.1, .1)) +\n# ggrepel::geom_text_repel(\n#   aes(label = ifelse(as.numeric(x) == 2, as.character(stratum), NA) ),\n#   stat = \"stratum\",\n#   size = 3, direction = \"y\", nudge_x = 1.2\n# ) +\nscale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +\n  ggrepel::geom_label_repel(\n aes(label = ifelse(as.numeric(x) == 2, as.character(stratum), NA)),\n  stat = \"stratum\",\n  size = 3,\n  direction = \"y\",\n  nudge_x = .8,\n  box.padding = 0.3, # Padding around the text\n  label.padding = unit(0.25, \"lines\"), # Padding inside the box\n  label.size = 0.5, # Border thickness\n  label.r = unit(0.15, \"lines\"), # Corner radius of the box\n  fill = \"white\", # Background color for the label\n  color = \"black\" # Text color\n) +\n  facet_wrap(~ agency_name, scales = \"free\") +\n# facet_wrap(~ work_location_borough, scales = \"free_y\") +\n  # facet_grid(agency_name ~ ., scales = \"free\") +\n# facet_wrap(~ agency_name, scales = \"free_y\") +\n# facet_grid(years_band_group ~ agency_name, scales = \"free_y\") +\n# facet_grid(work_location_borough ~ agency_name, scales = \"free_y\") +\n# work_location_borough\n # facet_wrap(~ years_band_group + agency_name, scales = \"free_y\") + \n  labs(title = \"Student Performance on the Three Essays\",\n       x = \"Essays\",\n       y = \"Number of Students\",\n       fill=\"Section\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\",\n         panel.spacing = unit(3, \"lines\"),\n        legend.direction = \"horizontal\",\n        legend.box = \"horizontal\", \n        legend.text = element_text(size = 10) ,\n        )+\n  guides(\n    fill = guide_legend(\n      nrow = 1,                      # Force legend items into one row\n      # keywidth = 1.5, keyheight = 0.5 # Adjust key size for spacing\n    )\n  )",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money-2",
    "href": "results.html#who-gets-the-money-2",
    "title": "3¬† Results",
    "section": "3.3 Who gets the Money?",
    "text": "3.3 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.\n\nNumber of Employees\n\n\n\n\nCode\npayroll_data_fire_police_chart_2 &lt;-\n  payroll_data_fire_police |&gt; \n  filter(fiscal_year == 2024) |&gt;\n  # filter(title_description %in% c(\"POLICE OFFICER\",\"FIREFIGHTER\")) |&gt;\n  # filter(leave_status_as_of_june_30 == \"ACTIVE\") |&gt;\n  mutate(\n    flag_regular = ifelse(regular_gross_paid == 0, \"No\", \"Yes\"),\n    flag_overtime = ifelse(total_ot_paid == 0, \"No\", \"Yes\"),\n    flag_other = ifelse(total_other_pay == 0, \"No\", \"Yes\")\n  ) |&gt; \n  mutate(\n    # Define the range for breaks, including the floor of minimum to handle negative values\n    total_paid_group = cut(\n      total_paid,\n      breaks = seq(\n        floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, \n        ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,\n        by = range_band\n      ),\n      labels = paste0(\n        seq(\n          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, \n          ceiling(max(total_paid, na.rm = TRUE) / range_band - 1) * range_band,\n          by = range_band\n        ) / 1000,\n        \"k-\",\n        seq(\n          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band + range_band, \n          ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,\n          by = range_band\n        ) / 1000,\n        \"k\"\n      ),\n      include.lowest = TRUE,\n      right = FALSE\n    )\n  ) |&gt; \n  mutate(\n    total_paid_group = recode(\n      total_paid_group,\n      \"-200k--150k\" = \"Less than 0\",\n      \"-150k--100k\" = \"Less than 0\",\n      \"-100k--50k\" = \"Less than 0\",\n      \"-50k-0k\" = \"Less than 0\",\n      \"0k-50k\" = \"0k-50k\",\n      \"50k-100k\" = \"50k-100k\",\n      \"100k-150k\" = \"100k-150k\",\n      \"150k-200k\" = \"150k-200k\",\n      \"200k-250k\" = \"200k-250k\",\n      \"250k-300k\" = \"250k and above\",\n      \"300k-350k\" = \"250k and above\",\n      \"350k-400k\" = \"250k and above\",\n      \"400k-450k\" = \"250k and above\",\n      \"450k-500k\" = \"250k and above\",\n      \"500k-550k\" = \"250k and above\",\n      \"550k-600k\" = \"250k and above\",\n      \"600k-650k\" = \"250k and above\"\n    ),\n    total_paid_group = factor(total_paid_group, \n                              levels = c(\"250k and above\", \"200k-250k\", \n                                         \"150k-200k\", \"100k-150k\", \"50k-100k\", \n                                         \"0k-50k\", \"Less than 0\"))\n  ) |&gt; \n  mutate(\n    flag_regular = factor(flag_regular, levels = c(\"Yes\", \"No\")),\n    flag_overtime = factor(flag_overtime, levels = c(\"Yes\", \"No\")),\n  ) |&gt; \n  mutate(\n    years_at_agency = 2024 - agency_start_date_year,  # Calculate the years worked\n    years_band = case_when(\n      years_at_agency &gt;= 0 & years_at_agency &lt;= 5 ~ \"0-5 years\",\n      years_at_agency &gt; 5 & years_at_agency &lt;= 10 ~ \"5-10 years\",\n      years_at_agency &gt; 10 & years_at_agency &lt;= 20 ~ \"10-20 years\",\n      years_at_agency &gt; 20 ~ \"20+ years\",\n      TRUE ~ \"Unknown\"  # In case of any missing or incorrect data\n    ),\n    years_band = factor(years_band, levels = c(\"20+ years\", \"10-20 years\", \"5-10 years\", \"0-5 years\"))\n  ) |&gt; \n  mutate(total_paid_group_fill = total_paid_group,\n         years_band_group = years_band)\n\n\n# payroll_data_fire_police_chart_2 |&gt; \n  # filter(total_paid_group == \"250k and above\") |&gt; \n  # select(title_description) |&gt; distinct() |&gt; pull()\n\n\n\nlibrary(parcoords)\n\ntitle_mapping &lt;- c(\n  \"EXECUTIVE AGENCY COUNSEL\" = \"EXEC AGENCY CNSL\",\n  \"COMPUTER SYSTEMS MANAGER\" = \"COMPUTER SYS MGR\",\n  \"COUNSEL TO THE POLICE COMMISSIONER\" = \"POLICE CNSL\",\n  \"ADMINISTRATIVE STAFF ANALYST\" = \"ADMIN STAFF ANALYST\",\n  \"CAPTAIN - CHIEF OF STAFF\" = \"CAPT - CHIEF STAFF\",\n  \"DEPUTY COMMISSIONER\" = \"DEPUTY COMM\",\n  \"CAPTAIN DETAILED AS ASSISTANT CHIEF\" = \"CAPT - ASST CHIEF\",\n  \"CAPTAIN DETAILED AS CHIEF OF TRAINING\" = \"CAPT - CHIEF TRAINING\",\n  \"COMMISSIONER\" = \"COMMISSIONER\",\n  \"CAPTAIN DETAILED AS CHIEF OF SPECIAL OPERATIONS\" = \"CAPT - SPEC OPS CHIEF\",\n  \"CAPTAIN: CHIEF OF TRANSPORTATION BUREAU\" = \"CAPT - TRANS CHIEF\",\n  \"CAPTAIN DETAILED AS CHIEF OF DETECTIVES\" = \"CAPT - DET CHIEF\",\n  \"CHIEF OF INFORMATION TECHNOLOGY\" = \"IT CHIEF\",\n  \"CAPT DET CHIEF OF THE HOUSING BUREAU\" = \"CAPT DET - HOUSING\",\n  \"CAPT DET CHIEF OF THE TRANSIT BUREAU\" = \"CAPT DET - TRANSIT\",\n  \"CAPT DET CHIEF OF INTERNAL AFFAIRS\" = \"CAPT DET - INTERNAL AFF\",\n  \"CAPTAIN DETAILED AS CHIEF OF INTERAGENCY OPERATIONS\" = \"CAPT - INTERAGENCY OPS\",\n  \"CAPTAIN DETAILED AS CHIEF OF CRIME CONTROL STRATEGIES\" = \"CAPT - CRIME CTRL\",\n  \"SUPERVISING CHIEF SURGEON\" = \"CHIEF SURGEON\",\n  \"CAPT DET CHIEF OF DEPARTMENT\" = \"CAPT DET - DEPT CHIEF\",\n  \"SENIOR STATIONARY ENGINEER\" = \"SR STAT ENG\",\n  \"CAPTAIN DETAILED AS CHIEF OF PATROL\" = \"CAPT - PATROL CHIEF\",\n  \"CAPTAIN DETAILED AS CHIEF OF PERSONNEL\" = \"CAPT - PERS CHIEF\",\n  \"SUPERVISOR OF MECHANICS\" = \"SUPV MECHANICS\",\n  \"AGENCY ATTORNEY\" = \"AGENCY ATTY\",\n  \"FIRST DEPUTY COMMISSIONER\" = \"1ST DEPUTY COMM\",\n  \"POLICE OFFICER\" = \"POLICE OFFICER\",\n  \"P.O. DA DET GR3\" = \"P.O. DA DET GR3\",\n  \"P.O. DET SPEC\" = \"P.O. DET SPEC\",\n  \"LIEUTENANT\" = \"LIEUTENANT\",\n  \"CAPTAIN\" = \"CAPTAIN\",\n  \"OILER\" = \"OILER\",\n  \"SERGEANT-D/A SPECIAL ASSIGNMENT\" = \"SERG-SPEC ASSIGN\",\n  \"SERGEANT-\" = \"SERGEANT\",\n  \"POLICE OFFICER D/A DETECTIVE 2ND GR\" = \"P.O. DET 2ND GR\",\n  \"POLICE OFFICER D/A DETECTIVE 1ST GR\" = \"P.O. DET 1ST GR\",\n  \"LIEUTENANT D/A SPECIAL ASSIGNMENT\" = \"LIEUT-SPEC ASSIGN\",\n  \"LIEUTENANT D/A COMMANDER OF DETECTIVE SQUAD\" = \"LIEUT-DETECT CMD\",\n  \"STATIONARY ENGINEER\" = \"STAT ENG\",\n  \"CAPTAIN D/A DEPUTY CHIEF\" = \"CAPT-DEPUTY CHIEF\",\n  \"SERGEANT-D/A SUPERVISOR DETECTIVE SQUAD\" = \"SERG-DETECT CMD\",\n  \"CAPTAIN D/A INSPECTOR\" = \"CAPT-INSPECTOR\",\n  \"FIRE MEDICAL OFFICER\" = \"FIRE MED OFFICER\",\n  \"ADMINISTRATOR OF MEDICAL AFFAIRS\" = \"ADMIN MED AFFAIRS\",\n  \"DEPUTY ASSISTANT CHIEF OF DEPARTMENT\" = \"DEP ASST CHIEF\",\n  \"ASSISTANT CHIEF OF DEPARTMENT\" = \"ASST CHIEF\",\n  \"CHIEF OF DEPARTMENT\" = \"CHIEF OF DEPT\",\n  \"SUPERVISING EMERGENCY MEDICAL SERVICE SPECIALIST\" = \"SUPV EMS SPEC\",\n  \"ASSISTANT CHIEF FIRE MARSHAL\" = \"ASST CHIEF MARSHAL\",\n  \"SUPERVISOR ELECTRICIAN\" = \"SUPV ELECTRICIAN\",\n  \"CHIEF FIRE MARSHAL\" = \"CHIEF MARSHAL\",\n  \"FIREFIGHTER\" = \"FIREFIGHTER\",\n  \"MARINE ENGINEER\" = \"MARINE ENGINEER\",\n  \"WIPER\" = \"WIPER\",\n  \"PILOT\" = \"PILOT\",\n  \"BATTALION CHIEF\" = \"BATTALION CHIEF\",\n  \"SUPERVISING FIRE MARSHAL\" = \"SUPV FIRE MARSHAL\",\n  \"FIRE MARSHAL\" = \"FIRE MARSHAL\",\n  \"DEPUTY CHIEF\" = \"DEPUTY CHIEF\",\n  \"AUTO MECHANIC\" = \"AUTO MECHANIC\"\n)\n\n\n\n\npayroll_data_fire_police_chart_2_250 &lt;-\npayroll_data_fire_police_chart_2 |&gt; \n  filter(total_paid_group == \"250k and above\") |&gt; \n  # filter(total_paid_group == \"0k-50k\") |&gt; \n  mutate(title_description_short = title_mapping[title_description]) |&gt; \n  mutate(agency_name_order = ifelse(agency_name == \"FIRE DEPARTMENT\", \"ag-002\",\"ag-001\"))\n\n\n# \n# payroll_data_fire_police_chart_2_250 |&gt; \n#   select(title_description_short) |&gt; distinct() |&gt; \n#   arrange(desc(title_description_short)) |&gt; \n#   mutate(order_sequence = paste0(\"000-\",sprintf(\"%05d\", row_number())))\n\ntitle_order_sequence &lt;- payroll_data_fire_police_chart_2_250 |&gt; \n  select(title_description_short) |&gt; \n  distinct() |&gt; \n  arrange(desc(title_description_short)) |&gt; \n  mutate(order_sequence = paste0(\"000-\", sprintf(\"%05d\", row_number())))\n\n# Perform a left join to add order_sequence\npayroll_data_fire_police_chart_2_250 &lt;- payroll_data_fire_police_chart_2_250 |&gt; \n  left_join(title_order_sequence, by = \"title_description_short\")\n\ntitle_description_list &lt;- payroll_data_fire_police_chart_2_250 |&gt; \n  select(title_description_short) |&gt; \n  distinct(title_description_short) |&gt; \n  arrange(title_description_short) |&gt; \n  pull(title_description_short)\n\n# View the list\n# print(as.character(title_description_list))\n  \n\nparcoords(\n  payroll_data_fire_police_chart_2_250[, c(\n    # \"agency_name_order\", \n    \"order_sequence\",\n    \"agency_name_order\", \n    # \"title_description_short\",\n    \"regular_gross_paid\",\n    \"total_ot_paid\",\n    \"total_other_pay\",\n    \"total_paid\"\n  )], \n  rownames = FALSE,\n  brushMode = \"1D-axes\",\n  reorderable = TRUE,\n  queue = TRUE,\n  alpha = 0.25,\n  alphaOnBrushed = 0.1,\n  height = 750,\n  dimensions = list(\n    # outliers_rank = list(\n    #   title = \"outliers_rank\",\n    #   tickValues = c(\"High\",\"Not an Outlier\",\"Low\")\n    # ),\n    agency_name_order = list(\n      title = \"Agency\",\n      tickValues = c(\"FIRE\",\"POLICE\")\n    ),\n    order_sequence = list(\n      title = \"Job Title\",\n      tickValues = as.character(title_description_list)\n    )\n\n  ),\n  # color = list(\n  #   colorBy = \"outliers_rank\",  \n  #   colorScale = \"scaleOrdinal\",\n  #   colorScheme = outliers_colors\n  # ),\n   color = list(\n    colorBy = \"agency_name_order\",  \n    colorScale = \"scaleOrdinal\",\n    colorScheme = c(\"#0099CC\", \"#f94144\")\n  ),\n  withD3 = TRUE,\n  margin = list(\n    top = 30,    # Adjust top margin\n    right = 20,  # Adjust right margin\n    bottom = 30, # Adjust bottom margin\n    left = 125   # Increase left margin for better spacing\n  )\n)",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money-3",
    "href": "results.html#who-gets-the-money-3",
    "title": "3¬† Results",
    "section": "3.4 Who gets the Money?",
    "text": "3.4 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.\n\n\nCode\ntitle_descriptions_top_fire &lt;-\npayroll_data_fire_police |&gt;\n  filter(fiscal_year == \"2024\") |&gt;\n  filter(leave_status_as_of_june_30 == 'ACTIVE') |&gt;\n  group_by(agency_name, title_description) |&gt;\n  summarise(\n    Total_records = n(),\n    .groups = \"drop\"\n  ) |&gt;\n  filter(agency_name == 'FIRE DEPARTMENT') |&gt;\n  group_by(agency_name) |&gt;\n  slice_max(order_by = Total_records, n = 25) |&gt;\n  ungroup() |&gt;\n  pull(title_description)\n\n\n\ntitle_descriptions_top_police &lt;-\npayroll_data_fire_police |&gt;\n  filter(fiscal_year == \"2024\") |&gt;\n  filter(leave_status_as_of_june_30 == 'ACTIVE') |&gt;\n  group_by(agency_name, title_description) |&gt;\n  summarise(\n    Total_records = n(),\n    .groups = \"drop\"\n  ) |&gt;\n  filter(agency_name == 'POLICE DEPARTMENT') |&gt;\n  group_by(agency_name) |&gt;\n  slice_max(order_by = Total_records, n = 25) |&gt;\n  ungroup() |&gt;\n  pull(title_description)\n\n\n\n\nCode\ntitle_short_fire &lt;- c(\n  \"FIREFIGHTER\" = \"Firefighter\",\n    \"SUPERVISING EMERGENCY MEDICAL SERVICE SPECIALIST-DPTY CHIEFS\" = \"Supervising EMS Specialist-Dpty Chiefs\",\n  \"EMERGENCY MEDICAL SPECIALIST-EMT\" = \"EMS-EMT\",\n  \"LIEUTENANT\" = \"Lieutenant\",\n  \"EMERGENCY MEDICAL SPECIALIST-PARAMEDIc\" = \"EMS-Paramedic\",\n  \"SUPERVISING EMERGENCY MEDICAL SERVICE SPECIALIST\" = \"Supervising EMS Specialist\",\n  \"CAPTAIN\" = \"Captain\",\n  \"BATTALION CHIEF\" = \"Battalion Chief\",\n  \"ASSOCIATE FIRE PROTECTION INSPECTOR\" = \"Assoc. Fire Protection Inspector\",\n  \"FIRE PROTECTION INSPECTOR\" = \"Fire Protection Inspector\",\n  \"AUTO MECHANIC\" = \"Auto Mechanic\",\n  \"SUPERVISING FIRE ALARM DISPATCHER\" = \"Supervising Fire Alarm Dispatcher\",\n  \"FIRE ALARM DISPATCHER\" = \"Fire Alarm Dispatcher\",\n  \"PRINCIPAL ADMINISTRATIVE ASSOCIATE -  NON SUPVR\" = \"Principal Admin Assoc-Non Supvr\",\n  \"FIRE MARSHAL\" = \"Fire Marshal\",\n  \"FIRE CADET\" = \"Fire Cadet\",\n  \"DEPUTY CHIEF\" = \"Deputy Chief\",\n  \"CLERICAL ASSOCIATE\" = \"Clerical Associate\",\n  \"ADM MANAGER-NON-MGRL\" = \"Admin Manager - Non-Mgr\",\n  \"ADMINISTRATIVE STAFF ANALYST\" = \"Admin Staff Analyst\",\n\n  \"COMMUNICATION ELECTRICIAN\" = \"Communication Electrician\",\n  \"COMPUTER SPECIALIST\" = \"Computer Specialist\",\n  \"SUPERVISING FIRE ALARM DISPATCHER\" = \"Supervising Fire Alarm Dispatcher\",\n  \"SUPERVISOR OF MECHANICS\" = \"Supervisor of Mechanics\",\n  \"CASE - MANAGEMENT NURSE\" = \"Case-Mgmt Nurse\",\n  \"EMERGENCY MEDICAL SPECIALIST TRAINEE\" = \"EMS-Trainee\"\n)\n\nexceptions_proper &lt;- c(\n  \"\\\\bDa\\\\b\" = \"DA\",\n  \"\\\\bP\\\\.o\\\\.\\\\b\" = \"P.O.\",\n  \"P.o.\\\\s\" = \"Police Officer \",\n  \"Ems\\\\s\" = \"EMS \",\n  \"Ems\\\\-\" = \"EMS-\",\n  \"Ems-Emt\" = \"EMS-EMT\"\n)\n\n\n\n\nCode\npayroll_data_fire_police |&gt;\n  filter(fiscal_year == \"2024\") |&gt;\n  # filter(leave_status_as_of_june_30 == 'ACTIVE') |&gt;\n  # filter(title_description %in% title_descriptions_top10) |&gt;\n  # filter(pay_basis == 'per Annum') |&gt;\n  filter((agency_name == 'FIRE DEPARTMENT' & title_description %in% title_descriptions_top_fire) |\n          (agency_name == 'POLICE DEPARTMENT' & title_description %in% title_descriptions_top_police)  ) |&gt;    mutate(\n     title_description = str_replace_all(title_description, title_short_fire)\n   ) |&gt;\n  # group_by(agency_name, title_description) |&gt;\n  mutate(\n    title_description = str_to_title(title_description),\n    title_description = str_remove(title_description, \"-$\"),\n    title_description = str_replace_all(title_description, exceptions_proper)\n  ) |&gt;\n  group_by(agency_name, title_description, pay_basis, work_location_borough) |&gt;\n  group_by(agency_name, title_description, work_location_borough) |&gt;\n  group_by(agency_name, title_description) |&gt;\n  # group_by(agency_name, work_location_borough) |&gt;\n  summarise(\n    Total_records = n(),\n    mean_base_salary = mean(base_salary, na.rm = TRUE),\n    mean_regular_paid = mean(regular_gross_paid, na.rm = TRUE),\n    mean_total_paid = mean(total_paid, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  arrange(agency_name, desc(Total_records)) |&gt;\n  select('agency_name',\n         'title_description',\n         'mean_regular_paid' ,\n         'mean_total_paid') |&gt;\n  # pivot_wider(names_from = tuition_type_factor, values_from = mean_tuition) |&gt;\n  mutate(perc_diff = abs(mean_total_paid - mean_regular_paid) / mean_regular_paid * 100) |&gt;\n  mutate(perc_diff_band = cut(perc_diff,\n                              breaks = c(seq(0, 1000, by = 25), Inf),\n                              include.lowest = TRUE)) |&gt;\nggplot() +\n  geom_bar(aes(x = -perc_diff *2500,\n               y= title_description,\n               fill = perc_diff_band),\n           stat = 'identity',\n           alpha = 1,\n  ) +\n  geom_text(aes(x = -perc_diff * 2500,\n                y = title_description,\n                label = paste0(round(perc_diff, 0), \"%\")),\n            hjust = 1.2,\n            size = 3,\n            color = \"black\",\n            alpha = 0.8,\n            check_overlap=TRUE,\n  ) +\n  geom_point(aes(x = mean_regular_paid,\n                 y = reorder(title_description, mean_regular_paid)),\n             color = \"deepskyblue3\",\n             size = 1.5,\n             stroke=2,\n  ) +\n  geom_segment(aes(x = 0,\n                   xend = mean_regular_paid,\n                   y = reorder(title_description, mean_regular_paid,),\n                   yend = reorder(title_description, mean_regular_paid)),\n               color = \"deepskyblue3\",\n               alpha=1,\n  ) +\n  geom_text(aes(x = mean_regular_paid,\n                y = reorder(title_description, mean_regular_paid),\n                label = scales::label_comma()(round(mean_regular_paid, 0))),\n            hjust = -0.4,\n            size = 3,\n            alpha = 0.6,\n            check_overlap=TRUE,\n  ) +\n  facet_grid(fct_infreq(agency_name) ~ .,\n             scales ='free_y',\n             space = 'free_y') +\n  scale_fill_brewer(name = \"% Ratio\",\n                    palette = \"RdYlGn\",\n                    direction = -1,\n                    na.translate = FALSE) +\n  scale_color_brewer(name = \"% Ratio\",\n                     palette = \"RdYlGn\",\n                     direction = -1,\n                     na.translate = FALSE) +\n  scale_x_continuous(\n    limits = c(-250000, 250000),\n    name = \"Regular Salary Paid (dots)\",\n    labels = function(x) ifelse(x &gt;= 0, scales::label_number()(x), \"\"),\n    sec.axis = sec_axis(~./-2500, name = \"% Ratio (bars)\",\n                        labels = function(x) ifelse(x &gt;= 0,\n                                                    paste0(scales::label_number()(x),\n                                                           '%'), \"\"))\n  ) +\n  labs(title = \"Ratio of `Total Salary` to `Regular Salary` VS Regular Salary by Job Title, Facet by Agency\",\n       y = \"Job Titles\",\n       caption = \"% Ratio = Total Salary Paid (Regular + Overtime + Other) / Regular Salary Paid\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n          # legend.position = c(0, 0),             # Place the legend at the bottom left\n  legend.justification = c(1, 1)      ,   # Align the legend to the left\n        panel.border = element_rect(color = \"darkgray\", fill = NA, linewidth = 1),\n        axis.title.x = element_text(hjust = 1),\n        axis.title.x.top = element_text(hjust = 0),\n        plot.title = element_text(hjust = 0),\n  plot.title.position = \"plot\",\n  # plot.title.justification = c(0.5, 0.5) \n  )",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money-4",
    "href": "results.html#who-gets-the-money-4",
    "title": "3¬† Results",
    "section": "3.5 Who gets the Money?",
    "text": "3.5 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.\n\n\nCode\n# Calculate mean and sd for each agency_name\nfacet_stats &lt;- payroll_data_fire_police |&gt;\n  group_by(agency_name) |&gt;\n  summarise(\n    mean_total_paid = mean(total_paid, na.rm = TRUE),\n    sd_total_paid = sd(total_paid, na.rm = TRUE)\n  )\n\n# Create a custom function to generate a normal curve\nnormal_curve_data &lt;- function(mean, sd, x_range, n = 100) {\n  x &lt;- seq(x_range[1], x_range[2], length.out = n)\n  y &lt;- dnorm(x, mean = mean, sd = sd)\n  data.frame(x = x, y = y)\n}\n\n# Generate data for normal curves for each facet\nnormal_curve &lt;- facet_stats |&gt;\n  rowwise() |&gt;\n  mutate(\n    curve_data = list(\n      normal_curve_data(\n        mean = mean_total_paid,\n        sd = sd_total_paid,\n        x_range = c(-250000, 300000)  # Define the x-axis range\n      )\n    )\n  ) |&gt;\n  unnest(curve_data)  # Unnest the list-column into rows\n\nvertical_line_glyph &lt;- function(data, params, size) {\n  grid::linesGrob(\n    x = c(0.5, 0.5), y = c(0.1, 0.9),\n    gp = grid::gpar(col = alpha(data$colour, data$alpha), lwd = size)\n  )\n}\n\n\n\n\nchart_01 &lt;-\nggplot(payroll_data_fire_police) +\n  geom_histogram(mapping = aes(x = total_paid, \n                               y = after_stat(density), \n                               fill = \"Density Histogram\"),\n                 binwidth = 10000,\n                 color = \"blue\",\n                 linetype = \"solid\",\n                 # center = 100000,\n                 # boundary = c(-50000,10000),\n                 # bo==\n                 )+\n  geom_density(mapping = aes(x = total_paid, \n                             color = \"Density Curve\"),\n               lwd = 1.2,\n               key_glyph = draw_key_path\n               ) +\n  geom_function(fun = dnorm,\n                aes(x = total_paid, \n                    color = \"Normal Curve\"), \n                lwd= 1.2,\n                args = list(mean = mean(payroll_data_fire_police$total_paid, na.rm = TRUE),\n                            sd = sd(payroll_data_fire_police$total_paid, na.rm = TRUE)),\n                ) +\n  scale_color_manual(values = c(\"Density Curve\" = \"red\", \"Normal Curve\" = \"limegreen\")) +\n  scale_fill_manual(values = c(\"Density Histogram\" = \"lightblue\")) +\n  scale_x_continuous(\n    limits = c(-25000, 300000),\n    breaks = seq(-50000, max(payroll_data_fire_police$total_paid, na.rm = TRUE), by = 25000),\n    labels = scales::label_number(scale = 1/1000, suffix = \"k\")\n  ) +\n  labs(title = \"Combined Density Histogram of Salary Paid for Fire and Police Departments\",\n       x = \"Salary Paid\",\n       y = \"Density\",\n       color = \"Curves\",\n       fill = \"Bars\", \n       # caption = \"Blue: Histogram, Red: Data Density Curve, Green: Normal Curve\"\n       ) +\n  # theme_minimal() +\n  theme(text = element_text(size = 14))+\n  theme(legend.position = \"none\")\n\n\n\n\n\nchart_02 &lt;-\n# Plot\nggplot(payroll_data_fire_police) +\n  geom_histogram(\n    mapping = aes(x = total_paid, y = after_stat(density), fill = \"Density Histogram\"),\n    binwidth = 10000,\n    color = \"blue\",\n    linetype = \"solid\"\n  ) +\n  geom_density(\n    mapping = aes(x = total_paid, color = \"Density Curve\"),\n    lwd = 1.2,\n    key_glyph = draw_key_path\n  ) +\n  geom_line(\n    data = normal_curve,\n    aes(x = x, y = y, color = \"Normal Curve\"),\n    lwd = 1.2\n  ) +\n    geom_vline(\n    data = facet_stats,\n    aes(xintercept = mean_total_paid, color = \"Mean Reference Line\"),\n    linetype = \"dashed\",\n    show.legend = TRUE,key_glyph = \"path\"\n  ) +\n  geom_text(\n    data = facet_stats,\n    aes(\n      x = mean_total_paid,\n      y = 0.00001,  # Adjust position for label\n      label = scales::label_number(scale = 1 / 1000, suffix = \"k\")(mean_total_paid)\n    ),\n    inherit.aes = FALSE,\n    color = \"purple\",\n    size = 6,\n    angle = 90,  # Rotate text vertically\n    vjust = 1.5,\n    hjust = 0.6\n  ) +\n  facet_wrap(~ agency_name) +\n  # scale_color_manual(values = c(\"Density Curve\" = \"red\", \"Normal Curve\" = \"limegreen\", \"Mean Reference Line\" = \"purple\")) +\n  scale_color_manual(\n    values = c(\n      \"Density Curve\" = \"red\",\n      \"Normal Curve\" = \"limegreen\",\n      \"Mean Reference Line\" = \"purple\"\n    ),\n    guide = guide_legend(override.aes = list(\n      `Density Curve` = list(linetype = \"solid\"),\n      `Normal Curve` = list(linetype = \"solid\"),\n      `Mean Line` = list(linetype = \"solid\")\n    ))\n  ) +\n  scale_fill_manual(values = c(\"Density Histogram\" = \"lightblue\")) +\n  scale_x_continuous(\n    limits = c(-25000, 300000),\n    breaks = seq(-50000, max(payroll_data_fire_police$total_paid, na.rm = TRUE), by = 50000),\n    labels = scales::label_number(scale = 1 / 1000, suffix = \"k\")\n  ) +\n  labs(\n    title = \"Density Histogram of Salary Paid per Agency\",\n    x = \"Salary Paid\",\n    y = \"Density\",\n    color = \"Curves\",\n    fill = \"Bars\",\n    caption = \"Salary Paid includes: Regular, Overtime and Other compensation.\"\n  ) +\n  scale_linetype_manual(name = \"Curves\", values = c(\"Horizontal\",\"solid\")) +\n            guides(fill = guide_legend(override.aes = list(linetype = 0)),\n                   # color = guide_legend(override.aes = list(linetype = c(0,4,5) ))\n                   ) +\n  # theme_minimal() +\n  theme(text = element_text(size = 14))+\n  theme(legend.position = \"bottom\")\n\n\n\n# &lt;!-- #| fig-width: 10 --&gt;\n# &lt;!-- #| fig-height: 10 --&gt;\n# &lt;!-- #| message: false --&gt;\n# &lt;!-- #| warning: false --&gt;\n\n\nchart_01 + chart_02 +\n  plot_layout(ncol = 1) \n\n\n\n\n\n\n\n\n\nCode\n  # plot_annotation(title = \"Data Distribution\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money-5",
    "href": "results.html#who-gets-the-money-5",
    "title": "3¬† Results",
    "section": "3.6 Who gets the Money?",
    "text": "3.6 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.\n\n\nCode\npayroll_data_fire_police |&gt; \n  # filter(fiscal_year %in% c(2023,2024)) |&gt; \n  mutate(fiscal_year_name = as.character(fiscal_year)) |&gt; \nggplot() +\n  geom_density_ridges(mapping= aes(x = total_paid,\n                                   y = fiscal_year_name,\n                                   color = agency_name,\n                                   fill = agency_name,\n                                   ),\n                      alpha=0.15,\n                      bandwidth = 10000,\n                      # jittered_points = TRUE,\n                      # position = position_raincloud(adjust_vlines = TRUE),\n                      position = \"raincloud\",\n                      quantiles = 2, quantile_lines = TRUE,\n                      vline_width = 1, vline_color = \"darkgreen\",\n                      # point_alpha = 0.01,\n                      # point_size = 0.001,\n                      # color='deepskyblue4',\n                      rel_min_height = 0.002,\n                      ) +\n  facet_wrap(~ agency_name) +\n  # facet_grid(agency_name~pay_basis) +\n   scale_x_continuous(\n    limits = c(-25000, 300000),\n    breaks = seq(-200000, max(payroll_data_fire_police$total_paid, na.rm = TRUE), by = 100000),\n    labels = scales::label_number(scale = 1/1000, suffix = \"k\")\n  ) +\n  scale_y_discrete(\n    expand = expansion(add = c(0.1, 1.5)) # Add space above the highest category\n  ) +\n  scale_color_manual(\n    values = c(\"POLICE DEPARTMENT\" = \"deepskyblue3\", \"FIRE DEPARTMENT\" = \"#f94144\")\n  ) +\n  scale_fill_manual(\n    values = c(\"POLICE DEPARTMENT\" = \"deepskyblue3\", \"FIRE DEPARTMENT\" = \"#f94144\")\n  ) +\n  labs(title = \"Ridgeline density plot of Salary Paid by Fiscal Year\",\n       x = \"Salary Paid\",\n       y = \"Fiscal Year\",\n       color = \"Agency\",\n       fill = \"Agency\",\n       caption = \"Salary Paid includes: Regular, Overtime and Other compensation.\\nGreen Vertical Line: Mean of each density curve.\")+\n    theme_minimal() +\n  # scale_linetype_manual(name = \"Curves\", values = c(\"Horizontal\",\"solid\")) +\n            guides(fill = guide_legend(override.aes = list(linetype = 0)))+\ntheme(\n    legend.position = \"bottom\",\n    # plot.margin = margin(t = 200, r = 5, b = 5, l = 5) # Add top margin (t = 20)\n  )",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money-6",
    "href": "results.html#who-gets-the-money-6",
    "title": "3¬† Results",
    "section": "3.7 Who gets the Money?",
    "text": "3.7 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.\n\n\nCode\npayroll_data_fire_police |&gt; \n  filter(fiscal_year %in% c(\"2024\", \"2023\")) |&gt;\n  filter(agency_name == \"POLICE DEPARTMENT\") |&gt;\n  # filter(leave_status_as_of_june_30 == \"ACTIVE\") |&gt;\n  group_by(fiscal_year, title_description) |&gt; \n  summarise(\n    total_paid = sum(total_paid, na.rm = TRUE),\n    .groups = 'drop'\n  ) |&gt;\n  pivot_wider(names_from = fiscal_year, values_from = total_paid) |&gt; \n  mutate(\n    difference = `2024` - `2023`,\n    difference_perc = (`2024` - `2023`) / `2023` * 100\n  ) |&gt;\n  filter(difference &gt; 0) |&gt;\n  arrange(desc(difference)) |&gt; \n  mutate(\n    label = ifelse(row_number() &lt;= 10, title_description, NA),  # Add labels for top 10\n    is_top10 = factor(row_number() &lt;= 10, levels = c(TRUE, FALSE), labels = c(\"Top 10\", \"Other Job Titles\")) # Custom order\n   ) |&gt; \n  ggplot() +\n  geom_point(\n    mapping = aes(\n      x = difference, \n      y = difference_perc, \n      fill = difference, \n      color = is_top10\n    ),\n    size = 3,\n    alpha = 0.7,\n    stroke = 0.6,\n    na.rm = TRUE,\n    shape = 21 # Use shape 21 to apply both color and fill\n  ) +\n  geom_label_repel(\n    aes(\n      x = difference,\n      y = difference_perc,\n      label = label\n    ),\n    na.rm = TRUE,\n    size = 3,      # Text size\n    box.padding = 0.35, # Padding around text box\n    point.padding = 0.3, # Space between point and label\n    segment.color = \"grey50\", # Line color connecting label to point\n    max.overlaps = 10,  # Limits overlapping labels\n    max.iter = 10000,\n    nudge_y = 190,\n    # nudge_x = 1,\n    force = 170,\n    # force_pull = 1,\n  ) +\n  scale_fill_distiller(\n    palette = \"Blues\", \n    direction = 1, \n    limits = c(0, 7000000),\n    # limits = c(0, 200000000)\n    # oob = scales::oob_squish, # Ensures values outside the range are treated properly\n    na.value = \"orange\",\n    labels = scales::label_number(scale = 1 / 1000000, suffix = \"M\"), # Display in millions\n    breaks = c(0, 5000000, 10000000), # Custom ticks\n    name = \"Salary Paid\\nDifference YoY\" # Legend title\n  ) +\n  scale_color_manual(\n    values = c(\"Top 10\" = \"orange\", \"Other Job Titles\" = 'deepskyblue3'), # Red for top 10, no fill for others\n    # labels = c(\"TRUE\" = \"Top 10\", \"FALSE\" = \"Other Job Titles\"), # Custom labels\n     # alpha = c(\"TRUE\" = 1, \"FALSE\" = 0),\n    guide = \"none\" # Remove legend for fill\n  ) +\n  labs(\n    x = \"Salary Paid Diffence\", \n    y = \"Percentage Difference\", \n    title = \"Salary Paid Diffence between 2023 and 2024\", \n    color = \"Job Titles\\nwith higher\\nSalary YoY\"\n  ) +\n  scale_x_log10(\n    # labels = scales::label_comma(),\n    breaks = c(0, 10000,100000, 1000000, 10000000, 100000000,1000000000,10000000000),\n    labels = c(\"0\",\"10K\",\"100K\", \"1M\", \"10M\", \"100M\",\"1B\",\"10B\"),\n    # expand = expansion(add = c(10, 0))\n                ) +\n  scale_y_continuous(\n    limits = c(0, 300),\n     labels = scales::label_percent(scale = 1, suffix = \"%\") # Add % suffix\n  ) +\n  guides(color = guide_legend(override.aes = list(size = 4))) +\n  theme_minimal() +\n  # theme_light() +\n  theme(\n    panel.grid.minor.x = element_blank(), # Remove minor grid lines on x-axis\n    legend.position = \"right\"           # Move legend to bottom\n  )",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money-7",
    "href": "results.html#who-gets-the-money-7",
    "title": "3¬† Results",
    "section": "3.8 Who gets the Money?",
    "text": "3.8 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.\n\n\nCode\nggplot(payroll_data_fire_police) +\n  geom_boxplot(mapping = aes(x = total_paid, \n                             y = fct_rev(as.factor(work_location_borough))\n                             ),\n               outlier.alpha = 0.25,\n               outlier.stroke = 0.7,\n               ) +\n  geom_jitter(mapping = aes(x = total_paid,\n                            y = work_location_borough,\n                            color=agency_name,\n                            # alpha = ifelse(agency_name == \"POLICE DEPARTMENT\", 0.0008, 0.01)\n                            ),\n              width = 0.25,\n              height = 0.25,\n              size = 0.001,\n              # alpha = 0.008,\n              alpha = ifelse(payroll_data_fire_police$agency_name == \"POLICE DEPARTMENT\", 0.006, 0.02),\n              #color='deepskyblue4',\n              ) +\n  scale_alpha_identity() +\n  facet_grid(agency_name ~ .) +\n  scale_color_manual(\n    values = c(\"POLICE DEPARTMENT\" = \"#00a6de\", \"FIRE DEPARTMENT\" = \"#f94144\")\n  ) +\n  scale_x_continuous(\n    # limits = c(-25000, 300000),\n    breaks = seq(-200000, max(payroll_data_fire_police$total_paid, na.rm = TRUE), by = 100000),\n    labels = scales::label_number(scale = 1/1000, suffix = \"k\")\n  ) +\n  # scale_x_log10(labels = scales::label_comma()) +\n  labs(title = \"Boxplot with jitter of Salary Paid over 10 years by Agency\",\n       x = \"Salary Paid\",\n       y = \"Location\") +\n  theme_minimal() +\n  theme_light() +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money-8",
    "href": "results.html#who-gets-the-money-8",
    "title": "3¬† Results",
    "section": "3.9 Who gets the Money?",
    "text": "3.9 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#who-gets-the-money-9",
    "href": "results.html#who-gets-the-money-9",
    "title": "3¬† Results",
    "section": "3.10 Who gets the Money?",
    "text": "3.10 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4¬† Interactive graph",
    "section": "",
    "text": "4.1 Who gets the Money?\nLorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus.\nMetus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus.\nWhat is the story? hi this is a test2wss\njan 15 balance october 16 nov 2015 red july 18 red March 2022 blue july 2020 blue\nsomething to go right below2\nanother this there",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Interactive graph</span>"
    ]
  },
  {
    "objectID": "d3graph.html#who-gets-the-money",
    "href": "d3graph.html#who-gets-the-money",
    "title": "4¬† Interactive graph",
    "section": "",
    "text": "something1\n\nAdd bar Remove bar\n\n\n\nsomething2\n\nAdd bar Remove bar",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Interactive graph</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5¬† Conclusion",
    "section": "",
    "text": "6 Results\nPossible 10 Charts based on Problem Set1 hitogram / facets (ps1) boxplot jitter (ps1) with ridgeline (ps1) density lines bar chart lump facet scattter plot Density plot geom_point with facet 9x9 grid (ps2 california) Cleveland dot plot ggparcords parcoords likert mosaic alluvium 11\nCode\n# Read the data RDS\npayroll_data_fire_police &lt;- readRDS(\"data_source/payroll_data_fire_police.rds\")\nCode\npayroll_data_fire_police &lt;-\n  payroll_data_fire_police |&gt; \n  mutate(title_description = toupper(title_description)) |&gt; \n  mutate(agency_start_date_year = year(agency_start_date)) |&gt; \n  mutate(total_paid = rowSums(across(c(regular_gross_paid, total_ot_paid, total_other_pay)),na.rm = TRUE))",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Conclusion</span>"
    ]
  },
  {
    "objectID": "conclusion.html#alluvium",
    "href": "conclusion.html#alluvium",
    "title": "5¬† Conclusion",
    "section": "7.1 alluvium",
    "text": "7.1 alluvium\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggalluvial)\n\n\n\n\nCode\npayroll_data_fire_police_pay_range &lt;-\npayroll_data_fire_police |&gt; \n  filter(fiscal_year == 2024) |&gt;\n  filter(agency_start_date_year == 2009) |&gt;\n  filter(leave_status_as_of_june_30 == \"ACTIVE\") |&gt; \n  # filter(title_description %in% c(\"POLICE OFFICER\",\"FIREFIGHTER\"))\n  filter(title_description %in% c(\"CAPTAIN\")) |&gt;\n  select(last_name, leave_status_as_of_june_30, title_description,regular_gross_paid,total_ot_paid,total_other_pay,total_paid) |&gt; \n  mutate(\n    # Define the range for breaks, including the floor of minimum to handle negative values\n    regular_gross_paid_group = cut(\n      regular_gross_paid,\n      breaks = seq(\n        floor(min(regular_gross_paid, na.rm = TRUE) / 50000) * 50000, \n        ceiling(max(regular_gross_paid, na.rm = TRUE) / 50000) * 50000,\n        by = 50000\n      ),\n      labels = paste0(\n        seq(\n          floor(min(regular_gross_paid, na.rm = TRUE) / 50000) * 50000, \n          ceiling(max(regular_gross_paid, na.rm = TRUE) / 50000 - 1) * 50000,\n          by = 50000\n        ) / 1000,\n        \"k-\",\n        seq(\n          floor(min(regular_gross_paid, na.rm = TRUE) / 50000) * 50000 + 50000, \n          ceiling(max(regular_gross_paid, na.rm = TRUE) / 50000) * 50000,\n          by = 50000\n        ) / 1000,\n        \"k\"\n      ),\n      include.lowest = TRUE,\n      right = FALSE\n    )\n  ) |&gt; \n  mutate(\n    # Define the range for breaks, including the floor of minimum to handle negative values\n    total_ot_paid_group = cut(\n      total_ot_paid,\n      breaks = seq(\n        floor(min(total_ot_paid, na.rm = TRUE) / 50000) * 50000, \n        ceiling(max(total_ot_paid, na.rm = TRUE) / 50000) * 50000,\n        by = 50000\n      ),\n      labels = paste0(\n        seq(\n          floor(min(total_ot_paid, na.rm = TRUE) / 50000) * 50000, \n          ceiling(max(total_ot_paid, na.rm = TRUE) / 50000 - 1) * 50000,\n          by = 50000\n        ) / 1000,\n        \"k-\",\n        seq(\n          floor(min(total_ot_paid, na.rm = TRUE) / 50000) * 50000 + 50000, \n          ceiling(max(total_ot_paid, na.rm = TRUE) / 50000) * 50000,\n          by = 50000\n        ) / 1000,\n        \"k\"\n      ),\n      include.lowest = TRUE,\n      right = FALSE\n    )\n  ) |&gt; \n  mutate(\n    # Define the range for breaks, including the floor of minimum to handle negative values\n    total_other_pay_group = cut(\n      total_other_pay,\n      breaks = seq(\n        floor(min(total_other_pay, na.rm = TRUE) / 50000) * 50000, \n        ceiling(max(total_other_pay, na.rm = TRUE) / 50000) * 50000,\n        by = 50000\n      ),\n      labels = paste0(\n        seq(\n          floor(min(total_other_pay, na.rm = TRUE) / 50000) * 50000, \n          ceiling(max(total_other_pay, na.rm = TRUE) / 50000 - 1) * 50000,\n          by = 50000\n        ) / 1000,\n        \"k-\",\n        seq(\n          floor(min(total_other_pay, na.rm = TRUE) / 50000) * 50000 + 50000, \n          ceiling(max(total_other_pay, na.rm = TRUE) / 50000) * 50000,\n          by = 50000\n        ) / 1000,\n        \"k\"\n      ),\n      include.lowest = TRUE,\n      right = FALSE\n    )\n  ) |&gt; \n  mutate(\n    # Define the range for breaks, including the floor of minimum to handle negative values\n    total_paid_group = cut(\n      total_paid,\n      breaks = seq(\n        floor(min(total_paid, na.rm = TRUE) / 50000) * 50000, \n        ceiling(max(total_paid, na.rm = TRUE) / 50000) * 50000,\n        by = 50000\n      ),\n      labels = paste0(\n        seq(\n          floor(min(total_paid, na.rm = TRUE) / 50000) * 50000, \n          ceiling(max(total_paid, na.rm = TRUE) / 50000 - 1) * 50000,\n          by = 50000\n        ) / 1000,\n        \"k-\",\n        seq(\n          floor(min(total_paid, na.rm = TRUE) / 50000) * 50000 + 50000, \n          ceiling(max(total_paid, na.rm = TRUE) / 50000) * 50000,\n          by = 50000\n        ) / 1000,\n        \"k\"\n      ),\n      include.lowest = TRUE,\n      right = FALSE\n    )\n  ) |&gt; \n  # mutate(\n  #   regular_gross_paid_group = factor(\n  #     regular_gross_paid_group,\n  #     levels = rev(sort(unique(regular_gross_paid_group))) # Explicit descending order\n  #   ),\n  #   total_paid_group = factor(\n  #     total_paid_group,\n  #     levels = rev(sort(unique(total_paid_group))) # Explicit descending order\n  #   )\n  # )|&gt; \n  arrange(total_paid)\n\n\n\n\nCode\nlevels(payroll_data_fire_police_pay_range$regular_gross_paid_group)\n\n\n[1] \"100k-150k\" \"150k-200k\"\n\n\nCode\nlevels(payroll_data_fire_police_pay_range$total_paid_group)\n\n\n[1] \"150k-200k\" \"200k-250k\"\n\n\n\n\nCode\nggplot(payroll_data_fire_police_pay_range,\n       aes(axis1 = total_paid_group, \n           axis2 = regular_gross_paid_group,\n           axis3 = total_ot_paid_group,\n           axis4 = total_other_pay_group,\n           )) +\n  geom_alluvium(aes(fill = total_paid_group), alpha = 0.8) +\n  geom_stratum(aes(fill = total_paid_group)) +\n  geom_text(stat = \"stratum\", \n            aes(label = paste(after_stat(stratum), \"\\n\", after_stat(count))), \n            size = 3, \n            hjust = 0.5) +\n  # scale_x_discrete(\n  #   limits = c(\"regular_gross_paid_group\", \"total_paid_group\"),\n  #   labels = c(\"regular_gross_paid_group\", \"total_paid_group\")\n  # ) +\n  scale_fill_brewer(palette = \"Spectral\", direction = -1, na.translate = FALSE) +\n  labs(title = \"Student Performance on Three Essays with GPA\",\n       x = \"Essays and GPA\",\n       y = \"Number of Students\",\n       fill = \"GPA\") +\n  theme_minimal()\n\n\nWarning in to_lodes_form(data = data, axes = axis_ind, discern =\nparams$discern): Some strata appear at multiple axes.\nWarning in to_lodes_form(data = data, axes = axis_ind, discern =\nparams$discern): Some strata appear at multiple axes.\nWarning in to_lodes_form(data = data, axes = axis_ind, discern =\nparams$discern): Some strata appear at multiple axes.\n\n\n\n\n\n\n\n\n\n\n\nCode\npayroll_data_fire_police_pay_range &lt;- payroll_data_fire_police_pay_range |&gt; \n  # mutate(across(where(is.character), ~ factor(., levels = rev(sort(unique(.))))))\n  mutate(across(where(is.factor), ~ factor(., levels = rev(sort(unique(.))))))\n\n\nlevels(payroll_data_fire_police_pay_range$regular_gross_paid_group)\n\n\n[1] \"150k-200k\" \"100k-150k\"\n\n\nCode\nlevels(payroll_data_fire_police_pay_range$total_ot_paid_group)\n\n\n[1] \"0k-50k\"\n\n\nCode\nlevels(payroll_data_fire_police_pay_range$total_other_pay_group)\n\n\n[1] \"0k-50k\"\n\n\nCode\nlevels(payroll_data_fire_police_pay_range$total_paid_group)\n\n\n[1] \"200k-250k\" \"150k-200k\"\n\n\nCode\n# [1] \"Harriman\"  \"Hudson\"    \"Riverside\" \"Watson\"\n\n\n\n\nCode\n# Frequency Table:\n\npayroll_data_fire_police_pay_range_frequency &lt;- \n  payroll_data_fire_police_pay_range |&gt; \n  select(regular_gross_paid_group,total_ot_paid_group,total_other_pay_group,total_paid_group) |&gt; \n  group_by(across(everything())) |&gt; \n  summarise(frequency = n(), .groups = 'drop')\n\n\n\n\nCode\nessay_grades_frequency_lode = to_lodes_form(payroll_data_fire_police_pay_range_frequency, axes = 1:4)\nessay_grades_frequency_lode$x &lt;- factor(essay_grades_frequency_lode$x,\n                                        labels = c(\"Essay 1\",\n                                                   \"Essay 2\", \n                                                   \"Essay 3\",\n                                                   \"Total\"))\nessay_grades_frequency_lode$stratum &lt;- factor(\n  essay_grades_frequency_lode$stratum,\n  levels = names(sort(setNames(\n    as.numeric(gsub(\"k\", \"\", gsub(\"\\\\D\", \"\", levels(essay_grades_frequency_lode$stratum)))),\n    levels(essay_grades_frequency_lode$stratum)\n  ), decreasing = TRUE))\n)\n\n\n\n\nCode\nessay_grades_frequency_lode = to_lodes_form(payroll_data_fire_police_pay_range_frequency, axes = 1:3)\nessay_grades_frequency_lode$x &lt;- factor(essay_grades_frequency_lode$x,\n                                        labels = c(\"Essay 1\",\n                                                   \"Essay 2\", \n                                                   \"Essay 3\"))\n\n\n\n\nCode\nggplot(essay_grades_frequency_lode, \n       aes(alluvium=alluvium, x=x, stratum=stratum, y=frequency)) +\n  # geom_flow() +\n  geom_alluvium(decreasing = TRUE)+\n  geom_alluvium(aes(fill = stratum),color=\"#000000\") +\n  # geom_lode() +\n  geom_stratum(color = \"#00509d\", \n               fill='white', \n               linewidth = 1.5, \n               aes(fill = NA), \n               alpha = 0.5) +\n  geom_text(stat = \"stratum\", \n            aes(label = paste(after_stat(stratum),\"\\n\" ,after_stat(count))),\n            hjust = 0.5\n            ) +\n  labs(title = \"Student Performance on the Three Essays\",\n       x = \"Essays\",\n       y = \"Number of Students\",\n       fill=\"Section\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n\nWarning in setup_data(...): Some differentiation aesthetics vary within alluvia, and will be diffused by their first value.\nConsider using `geom_flow()` instead.\n\n\n\n\n\n\n\n\n\n\n\nCode\nessay_grades_frequency_lode = to_lodes_form(payroll_data_fire_police_pay_range_frequency, axes = 1:4)\nessay_grades_frequency_lode$x &lt;- factor(essay_grades_frequency_lode$x,\n                                        labels = c(\"Essay 1\",\n                                                   \"Essay 2\", \n                                                   \"Essay 3\",\n                                                   \"Total\"))\n\n\n\n\nCode\nlevels(essay_grades_frequency_lode$stratum)\n\n\n[1] \"150k-200k\" \"100k-150k\" \"0k-50k\"    \"200k-250k\"\n\n\n\n\nCode\n# ggplot(essay_grades_frequency_lode, \n#        aes(alluvium=alluvium, \n#            x= x,\n#            axis1 = regular_gross_paid_group, \n#            # axis2 = regular_gross_paid_group,\n#            # axis3 = total_ot_paid_group,\n#            # axis4 = total_other_pay_group, \n#            stratum=stratum, \n#            y=frequency)) +\n#   geom_flow() +\n#   # geom_alluvium(decreasing = TRUE)+\n#   geom_alluvium(aes(fill = stratum), alpha = 0.8) +\n#   # geom_lode() +\n#   # geom_stratum(color = \"#00509d\", \n#   #              fill='white', \n#   #              linewidth = 1.5, \n#   #              aes(fill = NA), \n#   #              alpha = 0.5) +\n#   # geom_stratum(aes(fill = stratum)) +\n#   geom_text(stat = \"stratum\", \n#             aes(label = paste(after_stat(stratum),\"\\n\" ,after_stat(count))),\n#             hjust = 0.5\n#             ) +\n#   scale_fill_brewer(palette = \"Spectral\", direction = -1, na.translate = FALSE) +\n#   labs(title = \"Student Performance on the Three Essays\",\n#        x = \"Essays\",\n#        y = \"Number of Students\",\n#        fill=\"Section\") +\n#   theme_minimal() +\n#   theme(legend.position = \"bottom\")\n\n# \n# \n# ggplot(payroll_data_fire_police_pay_range,\n#        aes(axis1 = total_paid_group, \n#            axis2 = regular_gross_paid_group,\n#            axis3 = total_ot_paid_group,\n#            axis4 = total_other_pay_group,\n#            )) +\n#   geom_alluvium(aes(fill = total_paid_group), alpha = 0.8) +\n#   geom_stratum(aes(fill = total_paid_group)) +\n#   geom_text(stat = \"stratum\", \n#             aes(label = paste(after_stat(stratum), \"\\n\", after_stat(count))), \n#             size = 3, \n#             hjust = 0.5) +\n#   # scale_x_discrete(\n#   #   limits = c(\"regular_gross_paid_group\", \"total_paid_group\"),\n#   #   labels = c(\"regular_gross_paid_group\", \"total_paid_group\")\n#   # ) +\n#   scale_fill_brewer(palette = \"Spectral\", direction = -1, na.translate = FALSE) +\n#   labs(title = \"Student Performance on Three Essays with GPA\",\n#        x = \"Essays and GPA\",\n#        y = \"Number of Students\",\n#        fill = \"GPA\") +\n#   theme_minimal()\n# \n\n\n\n\nCode\npayroll_data_fire_police_pay_range_frequency &lt;-\n  payroll_data_fire_police_pay_range_frequency |&gt; \n  mutate(total_paid_group_fill = total_paid_group)\n\nessay_grades_frequency_lode = to_lodes_form(payroll_data_fire_police_pay_range_frequency, axes = 1:4)\nessay_grades_frequency_lode$x &lt;- factor(essay_grades_frequency_lode$x,\n                                        labels = c(1,2,3,\n                                                   \"Total\"))\nessay_grades_frequency_lode$stratum &lt;- factor(\n  essay_grades_frequency_lode$stratum,\n  levels = names(sort(setNames(\n    as.numeric(gsub(\"k\", \"\", gsub(\"\\\\D\", \"\", levels(essay_grades_frequency_lode$stratum)))),\n    levels(essay_grades_frequency_lode$stratum)\n  ), decreasing = TRUE))\n)\n\n\n\n\nCode\nggplot(essay_grades_frequency_lode, \n       aes(alluvium=alluvium, x=x, stratum=stratum, y=frequency)) +\n  geom_flow() +\n  # geom_alluvium(decreasing = TRUE)+\n  geom_alluvium(aes(fill = total_paid_group_fill), alpha = 0.8) +\n  # geom_lode() +\n  # geom_stratum(color = \"#00509d\", \n  #              fill='white', \n  #              linewidth = 1.5, \n  #              aes(fill = NA), \n  #              alpha = 0.5) +\n  geom_stratum(aes(fill = total_paid_group_fill)) +\n  geom_text(stat = \"stratum\", \n            aes(label = paste(after_stat(stratum),\"\\n\" ,after_stat(count))),\n            hjust = 0.5\n            ) +\n  scale_fill_brewer(palette = \"Spectral\", direction = -1, na.translate = FALSE) +\n  labs(title = \"Student Performance on the Three Essays\",\n       x = \"Essays\",\n       y = \"Number of Students\",\n       fill=\"Section\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Conclusion</span>"
    ]
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "6¬† Appendix",
    "section": "",
    "text": "6.1 Creating the subset data\nIn this section, we will explore the decision-making process for selecting a subset of the data and the detailed transformation the original dataset with 6,225,611 rows to our final dataset with 804,630 rows.\nCode\nflowchart LR\n  A[Importing Data] --&gt; B[Understanding and \\n cleaning the raw data]\n  B --&gt; C(Transforming Columns)\n  B --&gt; D(Filtering Data)\n  B --&gt; E(Backfilling NA)\n  C --&gt; F[Saving Subset Data]\n  D --&gt; F[Saving Subset Data]\n  E --&gt; F[Saving Subset Data]\n\n\n\n\n\nflowchart LR\n  A[Importing Data] --&gt; B[Understanding and \\n cleaning the raw data]\n  B --&gt; C(Transforming Columns)\n  B --&gt; D(Filtering Data)\n  B --&gt; E(Backfilling NA)\n  C --&gt; F[Saving Subset Data]\n  D --&gt; F[Saving Subset Data]\n  E --&gt; F[Saving Subset Data]",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "appendix.html#importing-the-data",
    "href": "appendix.html#importing-the-data",
    "title": "6¬† Appendix",
    "section": "6.2 Importing the data",
    "text": "6.2 Importing the data\nTo access the data, we can go directly to the URL:\n\n\nhttps://data.cityofnewyork.us/City-Government/Citywide-Payroll-Data-Fiscal-Year-/k397-673e/about_data\n\nFrom this URL, you can click the button ‚ÄòExport‚Äô, and then select Download File-CSV format (All data 6225611 rows). This will download a file of about 840MB. Remember, we are using the data Last Updated on October 30, 2024.\nThe file will be downloaded with the name: Citywide_Payroll_Data__Fiscal_Year__YYYYMMDD.csv\n\n\n(YYYYMMDD refers to the date that you downloaded the file)\n\nOnce the data was downloaded, it was added to a new folder inside the repository called ‚Äòdata_source‚Äô.\n\n\nCode\n# import original data\npayroll_data_source &lt;- read.csv(\"./data_source/Citywide_Payroll_Data__Fiscal_Year__20241111.csv\") \n\n# make a copy of original data for transformations\npayroll_data &lt;- data.frame(payroll_data_source)\n\n# rename columns\nnames(payroll_data) &lt;- gsub(\"[\\\\.]+\", \"_\", tolower(names(payroll_data_source)))",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "appendix.html#understanding-and-cleaning-the-raw-data",
    "href": "appendix.html#understanding-and-cleaning-the-raw-data",
    "title": "6¬† Appendix",
    "section": "6.3 Understanding and cleaning the raw data",
    "text": "6.3 Understanding and cleaning the raw data\nStarting with the original data (6.22 million rows). This is quick summary of how many categories we have in each column:\n\n\nCode\npayroll_data |&gt; \n  summarise(\n    \"Number of Agencies\"     = n_distinct(agency_name),\n    \"Number of Titles\"       = n_distinct(title_description),\n    \"Number of Locations\"    = n_distinct(work_location_borough),\n    \"Number of Pay Basis\"    = n_distinct(pay_basis),\n    \"Number of Fiscal Years\" = n_distinct(fiscal_year)\n  ) |&gt; \n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\nNumber of Agencies\nNumber of Titles\nNumber of Locations\nNumber of Pay Basis\nNumber of Fiscal Years\n\n\n\n\n170\n1991\n23\n4\n11\n\n\n\n\n\n\n\n\n\n6.3.1 Agencies\nMany of the agencies in the raw data have the following format: AGENCY_NAME #NUMBER.\nExamples:\n\n\n\nBROOKLYN COMMUNITY BOARD #1\nBROOKLYN COMMUNITY BOARD #2\nBROOKLYN COMMUNITY BOARD #3\n\n\nWe will group Agency names by aggregating all agencies that have the same name, but different numbers. This will reduce overall number os agencies.\n\n\nCode\npayroll_data &lt;- \n  payroll_data |&gt; \n  mutate(agency_name_clean = trimws(gsub(\"#\\\\d+$\", \"\", agency_name)))\n\npayroll_data |&gt; \n  summarise(\n    \"Number of Agencies Before\" = n_distinct(agency_name),\n    \"Number of Agencies After\"  = n_distinct(agency_name_clean),\n  ) |&gt; \n  kable()\n\n\n\n\n\nNumber of Agencies Before\nNumber of Agencies After\n\n\n\n\n170\n116\n\n\n\n\n\n\nNow, let‚Äôs take a look at the top 10 Agencies:\n\n\nCode\npayroll_data_summary &lt;- payroll_data |&gt; \n  group_by(agency_name_clean) |&gt; \n  summarise(\n    Total_records = n()\n  ) |&gt; \n  arrange(desc(Total_records)) |&gt; \n  slice_head(n = 10)  \n\n\npayroll_data_summary |&gt; \n  kable(col.names = c(\"Agency\", \"Total Records\")) |&gt; \n  row_spec(which(payroll_data_summary$agency_name_clean == \"FIRE DEPARTMENT\"),   background = \"#f94144\", color = \"white\") |&gt; \n  row_spec(which(payroll_data_summary$agency_name_clean == \"POLICE DEPARTMENT\"), background = \"deepskyblue3\", color = \"white\")\n\n\n\n\n\nAgency\nTotal Records\n\n\n\n\nDEPT OF ED PEDAGOGICAL\n1207427\n\n\nDEPT OF ED PER SESSION TEACHER\n997983\n\n\nPOLICE DEPARTMENT\n612076\n\n\nDEPT OF ED PARA PROFESSIONALS\n412698\n\n\nBOARD OF ELECTION POLL WORKERS\n375001\n\n\nDEPT OF ED HRLY SUPPORT STAFF\n255501\n\n\nFIRE DEPARTMENT\n209272\n\n\nDEPARTMENT OF EDUCATION ADMIN\n181282\n\n\nDEPT OF PARKS & RECREATION\n170200\n\n\nHRA/DEPT OF SOCIAL SERVICES\n157963\n\n\n\n\n\n\n\n\n\n\n\n\n6.3.2 Work Location Borough\nWhen looking at the Work Location Borough, we see many recording with missing data (506,234 rows). We can also observe that the names of the locations are not standardized, some names are Uppercase and some are not (MANHATTAN vs Manhattan).\n\n\nCode\npayroll_data |&gt; \n  group_by(work_location_borough) |&gt; \n  summarise(\n    Total_records = n()\n  ) |&gt; \n  arrange(desc(Total_records)) |&gt; \n  slice_head(n = 10) |&gt; \n  kable(col.names = c(\"Locations\", \"Total Records\")) |&gt; \n  row_spec(which(payroll_data |&gt; \n                 group_by(work_location_borough) |&gt; \n                 summarise(Total_records = n()) |&gt; \n                 arrange(desc(Total_records)) |&gt; \n                 slice_head(n = 10) |&gt; \n                 pull(work_location_borough) %in% c(\"\",\"Bronx\", \"MANHATTAN\", \"Manhattan\")),   background = \"#fcefb4\", color = \"black\")\n\n\n\n\n\nLocations\nTotal Records\n\n\n\n\nMANHATTAN\n4077947\n\n\nQUEENS\n621225\n\n\nBROOKLYN\n523572\n\n\n\n506234\n\n\nBRONX\n286551\n\n\nOTHER\n116918\n\n\nRICHMOND\n77020\n\n\nWESTCHESTER\n5653\n\n\nULSTER\n3245\n\n\nManhattan\n1622\n\n\n\n\n\n\n\n\nOur first step here is to capitalize all the location names.\n\n\nCode\npayroll_data &lt;- payroll_data |&gt; \n  mutate(work_location_borough_clean = toupper(work_location_borough))\n\npayroll_data |&gt; \n  summarise(\n    \"Number of Locations Before\" = n_distinct(work_location_borough),\n    \"Number of Locations After\"  = n_distinct(work_location_borough_clean),\n  ) |&gt; \n  kable()\n\n\n\n\n\nNumber of Locations Before\nNumber of Locations After\n\n\n\n\n23\n19\n\n\n\n\n\n\nThe main 5 locations of this dataset are: BRONX, BROOKLYN, MANHATTAN, QUEENS, RICHMOND\nUsing the top 10 agencies that we found previously, we will keep all the agencies that have at least data for all 5 locations:\n\n\nCode\nrequired_boroughs &lt;- c(\"BRONX\", \"BROOKLYN\", \"MANHATTAN\", \"QUEENS\", \"RICHMOND\")\n\nagencies_present_in_required_boroughs &lt;-\n  payroll_data |&gt;\n  filter(work_location_borough_clean %in% required_boroughs) |&gt; \n  group_by(agency_name_clean) |&gt;  \n  summarise(\n    borough_count = n_distinct(work_location_borough_clean)  \n  ) |&gt;\n  filter(borough_count == length(required_boroughs)) |&gt; \n  filter(agency_name_clean %in% payroll_data_summary$agency_name_clean) |&gt; \n  pull(agency_name_clean)\n\n\npayroll_data_agencies_present_in_required_boroughs &lt;-\n  payroll_data |&gt; \n  filter(agency_name_clean %in% payroll_data_summary$agency_name_clean) |&gt; \n  filter(agency_name_clean %in% agencies_present_in_required_boroughs) |&gt; \n  group_by(agency_name_clean) |&gt; \n  summarise(\n    Total_records = n(),\n    \"Number of Locations\" = n_distinct(work_location_borough_clean)\n  ) |&gt; \n  arrange(desc(Total_records)) \n\npayroll_data_agencies_present_in_required_boroughs |&gt; \n  kable(col.names = c(\"Agency\", \"Total Records\", \"Number of Locations\")) |&gt; \n  row_spec(which(payroll_data_agencies_present_in_required_boroughs$agency_name_clean == \"FIRE DEPARTMENT\"),   background = \"#f94144\", color = \"white\") |&gt; \n  row_spec(which(payroll_data_agencies_present_in_required_boroughs$agency_name_clean == \"POLICE DEPARTMENT\"), background = \"deepskyblue3\", color = \"white\")\n\n\n\n\n\nAgency\nTotal Records\nNumber of Locations\n\n\n\n\nPOLICE DEPARTMENT\n612076\n5\n\n\nFIRE DEPARTMENT\n209272\n7\n\n\nDEPARTMENT OF EDUCATION ADMIN\n181282\n12\n\n\nDEPT OF PARKS & RECREATION\n170200\n7\n\n\nHRA/DEPT OF SOCIAL SERVICES\n157963\n8\n\n\n\n\n\n\n\n\nSince we are interested in the POLICE and FIRE departments, let‚Äôs take a closer look at the FIRE DEPARTMENT since it contains 7 locations. Based on these results, we have 1 record with location OTHER and 16555 with Blank location.\n\n\nCode\npayroll_data |&gt; \n  filter(agency_name_clean %in%  c(\"POLICE DEPARTMENT\",\"FIRE DEPARTMENT\")) |&gt; \n  filter(agency_name_clean %in% agencies_present_in_required_boroughs) |&gt; \n  group_by(agency_name_clean,work_location_borough_clean,fiscal_year) |&gt; \n  summarise(\n    Total_records = n(), .groups = 'drop'\n  ) |&gt; \n  arrange(agency_name_clean,work_location_borough_clean,fiscal_year) |&gt; \n  filter (!work_location_borough_clean %in% required_boroughs) |&gt; \n  kable(col.names = c(\"Agency\", \"Location\", \"Fiscal Year\", \"Total Records\"))\n\n\n\n\n\nAgency\nLocation\nFiscal Year\nTotal Records\n\n\n\n\nFIRE DEPARTMENT\n\n2014\n16555\n\n\nFIRE DEPARTMENT\nOTHER\n2022\n1\n\n\n\n\n\n\nThe final decision for location is to keep only data for the major 5 locations:\nBRONX, BROOKLYN, MANHATTAN, QUEENS, RICHMOND.\n\n\n\n\n\n6.3.3 Fiscal Year\nUsing only the FIRE and POLICE department, we can observe that we have no records for 2014 for the Police department. Please note that the 16555 in the FIRE department for 2014 are the same records with blank location we found before.\nThe final decision for Fiscal Year is to drop 2014 and keep only data from 2015 to 2024.\n\n\nCode\n# Create the pivot table\npivot_table_fiscal_year &lt;- payroll_data |&gt;\nfilter(agency_name_clean %in%  c(\n    \"POLICE DEPARTMENT\",\n    \"FIRE DEPARTMENT\"\n    )) |&gt; \n  group_by(fiscal_year, agency_name_clean) |&gt; \n  summarise(count = n(), .groups = 'drop') |&gt; \n  pivot_wider(\n    names_from = agency_name_clean,  \n    values_from = count,  \n    values_fill = list(count = 0) \n  )\n\npivot_table_fiscal_year |&gt;\n  kable(col.names = c(\"Fiscal Year\", \"FIRE DEPARTMENT\", \"POLICE DEPARTMENT\")) |&gt; \n  kable_styling() |&gt;\n  column_spec(3, background = ifelse(as.matrix(pivot_table_fiscal_year[, 3]) == 0, \"#fcefb4\", \"\"))\n\n\n\n\n\nFiscal Year\nFIRE DEPARTMENT\nPOLICE DEPARTMENT\n\n\n\n\n2014\n16555\n0\n\n\n2015\n17380\n59264\n\n\n2016\n19934\n65868\n\n\n2017\n18687\n62516\n\n\n2018\n18391\n59811\n\n\n2019\n18679\n59970\n\n\n2020\n19193\n60316\n\n\n2021\n19049\n59009\n\n\n2022\n20920\n60804\n\n\n2023\n19072\n58617\n\n\n2024\n21412\n65901\n\n\n\n\n\n\n\n\n\n\n\n\n6.3.4 Pay Basis\nBased on the different types of pay basis, we will drop the Prorated Annual as it is the category with the lowest amount of records and it only affects 1 job title (Chaplain).\nThe final decision for Pay Basis is to keep only data for the categories:\nper Annum, per Day, per Hour.\n\n\nCode\npayroll_data |&gt; \n  # filter(fiscal_year == \"2024\") |&gt;\n  filter(agency_name_clean %in%  c(\n    \"POLICE DEPARTMENT\",\n    \"FIRE DEPARTMENT\"\n    )) |&gt; \n  group_by(agency_name_clean,pay_basis) |&gt; \n  summarise(\n    Total_records = n(),\n    Count_of_titles = n_distinct(title_description)\n    , .groups = 'drop'\n  ) |&gt; \n  arrange(desc(Total_records)) |&gt;\n  kable(col.names = c(\"Agency\", \"Pay Basis\", \"Total Records\", \"Count of Titles\"))\n\n\n\n\n\nAgency\nPay Basis\nTotal Records\nCount of Titles\n\n\n\n\nPOLICE DEPARTMENT\nper Annum\n573429\n286\n\n\nFIRE DEPARTMENT\nper Annum\n203929\n199\n\n\nPOLICE DEPARTMENT\nper Hour\n32769\n29\n\n\nPOLICE DEPARTMENT\nper Day\n5794\n39\n\n\nFIRE DEPARTMENT\nper Day\n3934\n35\n\n\nFIRE DEPARTMENT\nper Hour\n1324\n47\n\n\nFIRE DEPARTMENT\nProrated Annual\n85\n1\n\n\nPOLICE DEPARTMENT\nProrated Annual\n84\n1\n\n\n\n\n\nCode\npayroll_data |&gt; \n  # filter(fiscal_year == \"2024\") |&gt;\n  filter(agency_name_clean %in%  c(\n    \"POLICE DEPARTMENT\",\n    \"FIRE DEPARTMENT\"\n    )) |&gt; \n  filter(pay_basis == \"Prorated Annual\") |&gt;\n  filter(title_description == \"CHAPLAIN\") |&gt; \n  group_by(agency_name_clean,pay_basis,title_description) |&gt; \n  summarise(\n    Total_records = n()\n    , .groups = 'drop'\n  ) |&gt; \n  arrange(agency_name_clean) |&gt;\n  kable(col.names = c(\"Agency\", \"Pay Basis\", \"Title\", \"Total Records\"))\n\n\n\n\n\nAgency\nPay Basis\nTitle\nTotal Records\n\n\n\n\nFIRE DEPARTMENT\nProrated Annual\nCHAPLAIN\n85\n\n\nPOLICE DEPARTMENT\nProrated Annual\nCHAPLAIN\n84\n\n\n\n\n\n\n\n\n\n\n6.3.5 Payroll Number\nFirst let‚Äôs start create a dataset filtered based on the criteria we discussed above:\n\n\n\nAgency (‚ÄúPOLICE DEPARTMENT‚Äù,‚ÄúFIRE DEPARTMENT‚Äù)\nLocation (‚ÄúBRONX‚Äù, ‚ÄúBROOKLYN‚Äù, ‚ÄúMANHATTAN‚Äù, ‚ÄúQUEENS‚Äù, ‚ÄúRICHMOND‚Äù),\nFiscal Year (2015-2024)\nPay Basis (‚Äúper Annum‚Äù, ‚Äúper Day‚Äù, ‚Äúper Hour‚Äù)\n\n\nFrom this dataset, we still have 243,601 NA records for the column `Payroll Number‚Äô. By doing a group by analysis per fiscal year, we can observe the NA are related to the years 2015, 2016, and 2017. So we will backfill those years with the proper payroll number code based on each agency. This way we will no longer have NA values in the new dataset.\n\n\nCode\npayroll_data_filtered &lt;- \n  payroll_data |&gt; \n  filter(agency_name_clean %in%  c(\"POLICE DEPARTMENT\",\"FIRE DEPARTMENT\")) |&gt; \n  filter(work_location_borough_clean %in%   c(\"BRONX\", \"BROOKLYN\", \"MANHATTAN\", \"QUEENS\", \"RICHMOND\")) |&gt; \n  filter(fiscal_year &gt; \"2014\") |&gt; \n  filter(pay_basis %in%   c(\"per Annum\", \"per Day\", \"per Hour\"))\n\n\n# Count NA values\nna_summary &lt;- payroll_data_filtered |&gt;\n  summarise(across(everything(), ~ sum(is.na(.)))) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"NA Count\"\n  )\n\n# Count blank values\nblank_summary &lt;- payroll_data_filtered |&gt;\n  summarise(across(everything(), ~ sum(. == \"\", na.rm = TRUE))) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Blank Count\"\n  )\n\n# Count zero values\nzero_summary &lt;- payroll_data_filtered |&gt;\n  summarise(across(everything(), ~ sum(. == 0, na.rm = TRUE))) |&gt;\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Zero Count\"\n  )\n\n\ncombined_summary &lt;- na_summary |&gt;\n  inner_join(blank_summary, by = \"Column\") |&gt;\n  inner_join(zero_summary, by = \"Column\")\n\n# combined_summary |&gt;\n#   filter(`NA Count` &gt; 0 | `Blank Count` &gt; 0 | `Zero Count` &gt; 0) |&gt; \n#   kable(col.names = c(\"Column\", \"NA Count\", \"Blank Count\", \"Zero Count\"))\n\nna_summary |&gt; \n  filter(`NA Count` &gt; 0) |&gt; \n  kable(col.names = c(\"Column\", \"NA Count\"))\n\n\n\n\n\nColumn\nNA Count\n\n\n\n\npayroll_number\n243601\n\n\n\n\n\n\n\nCode\npayroll_data_filtered_payroll &lt;- payroll_data_filtered |&gt; \n  group_by(agency_name_clean,payroll_number,fiscal_year) |&gt; \n  summarise(\n    Total_records = n()\n    ,.groups = \"drop\"\n  ) |&gt; \n  arrange(agency_name_clean,fiscal_year,desc(Total_records))\n\npayroll_data_filtered_payroll |&gt; \n  kable(col.names = c(\"Agency\", \"Payroll Number\", \"Fiscal Year\", \"Total Records\")) |&gt;\n  column_spec(2, background = ifelse(is.na(as.matrix(payroll_data_filtered_payroll[, 2])), \"#fcefb4\", \"\"))\n\n\n\n\n\nAgency\nPayroll Number\nFiscal Year\nTotal Records\n\n\n\n\nFIRE DEPARTMENT\nNA\n2015\n17372\n\n\nFIRE DEPARTMENT\nNA\n2016\n19926\n\n\nFIRE DEPARTMENT\nNA\n2017\n18679\n\n\nFIRE DEPARTMENT\n57\n2018\n18383\n\n\nFIRE DEPARTMENT\n57\n2019\n18671\n\n\nFIRE DEPARTMENT\n57\n2020\n19186\n\n\nFIRE DEPARTMENT\n57\n2021\n19042\n\n\nFIRE DEPARTMENT\n57\n2022\n20911\n\n\nFIRE DEPARTMENT\n57\n2023\n19063\n\n\nFIRE DEPARTMENT\n57\n2024\n21405\n\n\nPOLICE DEPARTMENT\nNA\n2015\n59257\n\n\nPOLICE DEPARTMENT\nNA\n2016\n65860\n\n\nPOLICE DEPARTMENT\nNA\n2017\n62507\n\n\nPOLICE DEPARTMENT\n56\n2018\n59802\n\n\nPOLICE DEPARTMENT\n56\n2019\n59961\n\n\nPOLICE DEPARTMENT\n56\n2020\n60308\n\n\nPOLICE DEPARTMENT\n56\n2021\n59001\n\n\nPOLICE DEPARTMENT\n56\n2022\n60795\n\n\nPOLICE DEPARTMENT\n56\n2023\n58608\n\n\nPOLICE DEPARTMENT\n56\n2024\n65893\n\n\n\n\n\n\n\n\n\nCode\n# Backfill NA values with the proper payroll number based on each agency\npayroll_data_filtered &lt;- \n  payroll_data_filtered |&gt;\n  mutate(\n    payroll_number_clean = case_when(\n      is.na(payroll_number) & agency_name_clean == \"FIRE DEPARTMENT\" ~ 57,\n      is.na(payroll_number) & agency_name_clean == \"POLICE DEPARTMENT\" ~ 56,\n      TRUE ~ payroll_number\n    )\n  ) \n\n\n\n\n\n\n\n6.3.6 Agency Start Date\nThe column agency_start_date is loaded as a character when we read the data for the first time. We will change the type to date using lubridate.\n\n\nCode\nlibrary(lubridate)\n\npayroll_data_filtered &lt;- \n  payroll_data_filtered |&gt; \n  mutate(agency_start_date_clean = mdy(agency_start_date))",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "appendix.html#saving-subset-data",
    "href": "appendix.html#saving-subset-data",
    "title": "6¬† Appendix",
    "section": "6.4 Saving Subset Data",
    "text": "6.4 Saving Subset Data\nWe will save the Final Subset Data into the folder /data_source/, so we can load it later inside results.qmd.\n\n\nCode\npayroll_data_fire_police &lt;-\n  payroll_data_filtered |&gt; \n\n  # renaming clean columns to original names:\n  mutate(\n    agency_name = agency_name_clean,\n    work_location_borough = work_location_borough_clean,\n    payroll_number = payroll_number_clean,\n    agency_start_date = agency_start_date_clean\n  ) |&gt;\n  \n  # dropping clean columns\n  dplyr::select(-agency_name_clean, \n                -work_location_borough_clean, \n                -payroll_number_clean,\n                -agency_start_date_clean)\n\n\n# Please uncomment the CSV or the RDS method to save the subset data:\n\n# Save the data CSV\n# write.csv(payroll_data_fire_police, \"data_source/payroll_data_fire_police.csv\", row.names = FALSE)\n\n# Save the data RDS\n# saveRDS(payroll_data_fire_police, \"data_source/payroll_data_fire_police.rds\")\n\n# Read the data RDS\n# payroll_data_fire_police &lt;- readRDS(\"data_source/payroll_data_fire_police.rds\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "appendix.html#final-subset-data-information",
    "href": "appendix.html#final-subset-data-information",
    "title": "6¬† Appendix",
    "section": "6.5 Final Subset Data Information",
    "text": "6.5 Final Subset Data Information\nBased on the analysis above, we will add a few filters to produce and clean our final dataset.\nFilters applied to the dataset:\n\n\n\n\n\n\nColumn Name\nFilter\n\n\n\n\nAgency Name\nFIRE DEPARTMENT, POLICE DEPARTMENT\n\n\nWork Location Borough\nBRONX, BROOKLYN, MANHATTAN, QUEENS, RICHMOND\n\n\nFiscal Year\nFrom 2015 to 2024\n\n\nPay Basis\nper Annum, per Day, per Hour\n\n\n\n\n\n\n\n\n\n\nCleaning data and Handling NAs:\n\n\n\n\n\n\nColumn Name\nNote\n\n\n\n\nAgency Name\nGroup agencies with similar names. Keep only FIRE and POLICE.\n\n\nWork Location Borough\nUppercase all names. Filtering data only for top 5 Boroughs.\n\n\nFiscal Year\n2014 had missing data for Police Department. 2014 will be removed.\n\n\nPay Basis\nKeeping only the top 3 Pay Basis.\n\n\nPayroll Number\nMissing NA values have been backfilled based on Agency Name.\n\n\nAgency Start Date\nConvert strings to date using lubridate.\n\n\n\n\n\n\n\n\n\n\nSize of Final subset Data\n\n\n\n\n\n\nDimensions\n804,630 rows and 17 columns\n\n\nEach row represents\nCity Employee Salary per Fiscal Year\n\n\n\n\n\n\n\nRecord count by Agency:\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(dplyr)\n\npayroll_data_fire_police |&gt; \n  group_by(agency_name) |&gt; \n  summarise(\n    Count = n()\n    , .groups = 'drop'\n  ) |&gt; \n  arrange(desc(Count)) |&gt;\n  mutate(Percentage = Count / sum(Count) * 100,\n         Label = paste(\n                       format(Count, big.mark = \",\"), \"\\n\", \" (\", sprintf(\"%.0f\", Percentage), \"%)\", sep = \"\")) |&gt; \nggplot(aes(x = \"\", y = Count, fill = agency_name)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(theta = \"y\") +\n  scale_fill_manual(name= 'Agency', values = c(\"#f94144\", \"deepskyblue3\")) +\n  # labs(title = \"Record Count by Department\") +\n  theme_void() +\n  geom_text(aes(label = Label), position = position_stack(vjust = 0.5), color = \"white\")\n\n\n\n\n\n\n\n\n\nOverall dataset Information:\n\n\n\n\n\n\n\n\n\n\n\nMetrics\nFire Deparmtnet\nPolice Department\n\n\n\n\nCount of Records\n192,638\n611,992\n\n\nFiscal Years\n10 years (2015-2024)\n10 years (2015-2024)\n\n\nAgency Start Date Range\n1968-04-22 to 2024-07-29\n1960-11-14 to 2049-10-16\n\n\nWork Location Borough\n5\n5\n\n\nTitle Description\n238\n335",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Appendix</span>"
    ]
  }
]