# Results
::: callout-note
## This page contains Tabs. Please click through tabs to see additional charts/info.
:::

```{mermaid}
%%| echo: false

flowchart LR
  A[Fire & Police\nDepartment] --> B[Who Gets the Money?]
  A[Fire & Police\nDepartment] --> C[Where Do People Work?]
  B -.-> D[Distribution\nAnalysis]
  C -.-> D[Distribution\nAnalysis]
  D --> G[Salary\nvs\nExperience]
  G --> E[Who Gets\nPaid the Most?]
```

```{r}
#| message: false
#| warning: false

rm(list = ls())

# Import Libraries
library(tibble)
library(knitr)
library(kableExtra)
library(tidyverse)
library(ggplot2)
library(ggridges)
library(dplyr)
library(visdat)
library(lubridate)
library(scales)
library(ggalluvial)
library(patchwork)
library(ggrepel)
library(parcoords)
library(GGally)

# Read the source data
payroll_data_fire_police <- readRDS("data_source/payroll_data_fire_police.rds")

# Data Transformations
payroll_data_fire_police <-
  payroll_data_fire_police |> 
  mutate(title_description = toupper(title_description)) |> 
  mutate(agency_start_date_year = year(agency_start_date)) |> 
  mutate(work_location_borough = str_replace(work_location_borough, "RICHMOND", "STATEN ISLAND")) |> 
  mutate(title_description = str_replace(title_description, "SERGEANT-", "SERGEANT")) |> 
  mutate(total_paid = rowSums(across(c(regular_gross_paid, total_ot_paid, total_other_pay)),na.rm = TRUE))
```




## Who gets the Money? 
Everyone in the payroll database for the Fire and Police departments receives some form of compensation.

Perhaps a better question is: how many people are receiving salaries from these departments? From the chart below, we observe that the Fire Department has about one-third the number of employees compared to the Police Department. Additionally, most Fire Department employees are located in Brooklyn, while the Police Department has a higher concentration of employees in Manhattan. Overall, the number of employees in each department has remained relatively stable over the past 10 years, with 2024 recording the highest number of employees for both departments.

Now, letâ€™s examine how much these agencies are paying their employees. The Fire Department shows a slow but steady increase in total salaries paid each year. In contrast, Police Department salaries fluctuate over the years, with a notable spike in 2024. *(Refer to the `Amount Paid per Year` tab.)*

Interestingly, the Police Department employs three times as many people as the Fire Department. However, when comparing total compensation, the Police Department spends only about 2.5 times what the Fire Department spends. This disparity suggests that, on average, individual salaries in the Fire Department might be higher than those in the Police Department.



::: panel-tabset
## Number of Employees
```{r}
#| fig-width: 10
#| fig-height: 6


# Ensure fiscal_year is numeric
summarized_data <- payroll_data_fire_police |> 
  group_by(agency_name, fiscal_year, work_location_borough) |> 
  summarise(
    total_records = n(),
    total_paid = sum(total_paid),
    paid_per_person = sum(total_paid) / n(),
    .groups = "drop"
  ) |> 
  mutate(fiscal_year = as.numeric(fiscal_year))


# Calculate high-water mark and the corresponding year for each facet
high_water_mark_records <- summarized_data |>
  group_by(fiscal_year, agency_name) |>
  summarise(max_records = sum(total_records), .groups = "drop") |>
  group_by(agency_name) |>
  filter(max_records == max(max_records)) |>
  summarise(
    fiscal_year = fiscal_year[1],  # Get the fiscal year for max records
    max_records = max_records[1]  # Get the maximum record count
  )



# Plot
ggplot(summarized_data) +
  geom_col(aes(x = fiscal_year, y = total_records, fill = work_location_borough)) +
  
  # Add horizontal dashed line at high water mark with color mapped to a new variable
  geom_hline(
    data = high_water_mark_records,
    aes(yintercept = max_records, color = "Highest value in 10 years"),  # Map color to legend
    # inherit.aes = FALSE,
    linetype = "dashed"
  ) +
  
  # Add text labels for high water marks
  geom_text(
    data = high_water_mark_records,
    aes(
      x = fiscal_year,
      y = max_records,
      label = paste0("Year: ", fiscal_year, "\n Employees: ", label_comma()(max_records))
    ),
    inherit.aes = FALSE,
    color = "black",
    vjust = -0.5,
    hjust = 1,
    size = 4
  ) +
  
  # Add dots at high water marks
  geom_point(
    data = high_water_mark_records,
    aes(x = fiscal_year, y = max_records),
    inherit.aes = FALSE,
    color = "black",   # Dot color
    size = 3,        # Dot size
    shape = 16       # Circle shape (default)
  ) +
  
  # facet_wrap(~agency_name) 
  facet_wrap(~agency_name) +
  
  # Scale and labels for x-axis
  scale_x_continuous(
    breaks = seq(min(summarized_data$fiscal_year), max(summarized_data$fiscal_year), by = 1),
    labels = function(x) format(as.Date(paste0(x, "-01-01")), "%Y")
  ) +
  
  # Labels for title and axes
  labs(
    title = "Employees by Fiscal Year",
    x = "Fiscal Year",
    y = "Number of Employees",
    fill = "Location:",
    color = "Reference Line:"  # Add a label for the color legend
  ) +
  
  # Y-axis settings
  scale_y_continuous(
    limits = c(0, NA),  # Keep lower bound at 0
    labels = scales::label_number(scale = 1/1000, suffix = "k"),
    expand = expansion(mult = c(0, 0.2))  # Add some padding for aesthetics
  ) +
  
  # Set the colors for the fill based on boroughs
  scale_fill_manual(
    values = c(
      "BRONX" = "#FF595E",
      "BROOKLYN" = "#FFCA3A",
      "MANHATTAN" = "#8AC926",
      "QUEENS" = "#1982C4",
      "STATEN ISLAND" = "#6A4C93"
    )
  ) +
  
  # Set color for high water mark line
  scale_color_manual(
    values = c("Highest value in 10 years" = "black")  # Color the reference line black
  ) +
  
  # Minimal theme
  theme_minimal() +
  theme(
    text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical"  #
  )

```

## Amount Paid per Year
```{r}
#| fig-width: 10
#| fig-height: 6


# Ensure fiscal_year is numeric
summarized_data <- payroll_data_fire_police |> 
  group_by(agency_name, fiscal_year, work_location_borough) |> 
  summarise(
    total_records = n(),
    total_paid = sum(total_paid),
    paid_per_person = sum(total_paid) / n(),
    .groups = "drop"
  ) |> 
  mutate(fiscal_year = as.numeric(fiscal_year))


# Calculate high-water mark and the corresponding year for each facet
high_water_mark_records <- summarized_data |>
  group_by(fiscal_year, agency_name) |>
  summarise(max_records = sum(total_paid), .groups = "drop") |>
  group_by(agency_name) |>
  filter(max_records == max(max_records)) |>
  summarise(
    fiscal_year = fiscal_year[1],  # Get the fiscal year for max records
    max_records = max_records[1]  # Get the maximum record count
  )



# Plot
ggplot(summarized_data) +
  geom_col(aes(x = fiscal_year, y = total_paid, fill = work_location_borough)) +
  
  # Add horizontal dashed line at high water mark with color mapped to a new variable
  geom_hline(
    data = high_water_mark_records,
    aes(yintercept = max_records, color = "Highest value in 10 years"),  # Map color to legend
    # inherit.aes = FALSE,
    linetype = "dashed"
  ) +
  
  # Add text labels for high water marks
  geom_text(
    data = high_water_mark_records,
    aes(
      x = fiscal_year,
      y = max_records,
      label = paste0("Year: ", fiscal_year, "\n Amount Paid: ", label_currency()(max_records/1000000000)," Billions")
    ),
    inherit.aes = FALSE,
    color = "black",
    vjust = -0.5,
    hjust = 1,
    size = 4
  ) +
  
  # Add dots at high water marks
  geom_point(
    data = high_water_mark_records,
    aes(x = fiscal_year, y = max_records),
    inherit.aes = FALSE,
    color = "black",   # Dot color
    size = 3,        # Dot size
    shape = 16       # Circle shape (default)
  ) +
  
  # facet_wrap(~agency_name) 
  facet_wrap(~agency_name) +
  
  # Scale and labels for x-axis
  scale_x_continuous(
    breaks = seq(min(summarized_data$fiscal_year), max(summarized_data$fiscal_year), by = 1),
    labels = function(x) format(as.Date(paste0(x, "-01-01")), "%Y")
  ) +
  
  # Labels for title and axes
  labs(
    title = "Amount Paid to Employees by Fiscal Year",
    x = "Fiscal Year",
    y = "Amount Paid to Employees",
    fill = "Location:",
    color = "Reference Line:"  # Add a label for the color legend
  ) +
  
  # Y-axis settings
  scale_y_continuous(
    limits = c(0, NA),  # Keep lower bound at 0
    labels = scales::label_number(scale = 1/1000000000, suffix = " B"),
    expand = expansion(mult = c(0, 0.2))  # Add some padding for aesthetics
  ) +
  
  # Set the colors for the fill based on boroughs
  scale_fill_manual(
    values = c(
      "BRONX" = "#FF595E",
      "BROOKLYN" = "#FFCA3A",
      "MANHATTAN" = "#8AC926",
      "QUEENS" = "#1982C4",
      "STATEN ISLAND" = "#6A4C93"
    )
  ) +
  
  # Set color for high water mark line
  scale_color_manual(
    values = c("Highest value in 10 years" = "black")  # Color the reference line black
  ) +
  
  # Minimal theme
  theme_minimal() +
  theme(
    text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical"  #
  )

```

:::

\
\

## Where Do People Work?

For the Fire Department, the majority of employees (**38%**) are based in Brooklyn, while for the Police Department, Manhattan has the highest concentration of employees at **45%**. The proportion of salary paid (Regular + Overtime + Other) across locations closely mirrors the employee distribution.




```{r}
#| fig-width: 9
#| fig-height: 2
#| message: false
#| warning: false


payroll_data_fire_police |>
  group_by(agency_name, work_location_borough) |>
  summarise(
    count_of_employees = n(), 
    total_salary_paid  = sum(total_paid), 
    .groups = 'drop')|>
  group_by(agency_name) |> # Group by fiscal_year and agency_name for percentage calculations
  mutate(
    Employees = count_of_employees / sum(count_of_employees) * 100,
    `Salary Paid`= total_salary_paid / sum(total_salary_paid) * 100
  ) |>
  ungroup() |>
  pivot_longer(
    cols = c( `Salary Paid`,Employees),
    names_to = "metric",
    values_to = "percentage"
  ) |> 
  ggplot(aes(
    x = percentage,
    y = fct_rev(metric),
    fill = fct_rev(work_location_borough)
  )) +
  geom_bar(stat = "identity", position = "stack") + # Stacked bar chart
  geom_label(
    aes(
      label = paste0(round(percentage,0),"%"),
      # hjust = ifelse(percentage > 30, 0, 100),
      # hjust = ifelse(percentage > 30, 0, 100),
      # size = if_else(percentage > 30, 3.1, 3),
    ),
    position = position_stack(vjust = 0.5),
    # position = "identity",
    color="black",
    fill = "#ffffff",
    alignment= "left",
    size = 3,
  )+
#   ggrepel::geom_label_repel(
#  aes(label = paste0(round(percentage,0),"%"),),
#   # stat = "stratum",
#  # position = position_stack(vjust = 0.5),
#   size = 3,
#   direction = "y",
#   nudge_x = .8,
#   box.padding = 0.3, # Padding around the text
#   label.padding = unit(0.25, "lines"), # Padding inside the box
#   label.size = 0.5, # Border thickness
#   label.r = unit(0.15, "lines"), # Corner radius of the box
#   fill = "white", # Background color for the label
#   color = "black" # Text color
# ) +
  facet_wrap(~ agency_name) + # Facet by agency_name
  # facet_grid(agency_name ~ .) + # Facet by agency_name
  labs(
    title = "Employee and Salary Proportions per Location",
    x = "Percentage of Employees or Salary",
    y = "",
    fill = "Location"
  ) +
   scale_fill_manual(
    values = c(
      "BRONX" = "#FF595E",
      "BROOKLYN" = "#FFCA3A",
      "MANHATTAN" = "#8AC926",
      "QUEENS" = "#1982C4",
      "STATEN ISLAND" = "#6A4C93"
    )
  ) +
  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) + # Add padding to x-axis
  theme_light() +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12),
    # axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    anel.grid.minor.x = element_blank() ,
    legend.position = "right",
    # legend.position = "bottom",
  )+
  guides(fill = guide_legend(reverse=T))
```
\

Examining employee proportions per location reveals interesting patterns. Police employees in Manhattan make up the largest group across all locations and agencies. In Brooklyn, the Fire Department accounts for 35.4% of employees, while in Staten Island, Fire employees represent 34.9%, the second-highest proportion relative to Police. The darkest colors in the mosaic chart represent the ranked percentage of each agency's presence across all locations (see the `Percentages` tab for details).

::: panel-tabset
## Employees per Location


```{r}
#| fig-width: 10
#| fig-height: 6
#| message: false
#| warning: false

payroll_data_fire_police_mosaic <-
  payroll_data_fire_police |> 
  mutate(
    work_location_borough = as.factor(work_location_borough),
    agency_name = as.factor(agency_name)
  ) |> 
  mutate(
    agency_name_clean = str_remove(agency_name, " DEPARTMENT"),
    work_location_borough_clean = str_replace(work_location_borough, "RICHMOND", "STATEN ISLAND"),
    work_location_borough_clean_proper = str_to_title(work_location_borough_clean),
    work_location_borough_clean_proper = str_replace(work_location_borough_clean_proper, "Staten Island", "S. Island"),
  )

library(vcd)
mosaic(agency_name_clean~work_location_borough_clean_proper, 
       data=payroll_data_fire_police_mosaic,
       direction=c("v",'h'),
       highlighting_fill = c(
         "#EF3B2C",
         "#4292C6",
         "#A50F15",
         "#9ECAE1",
         "#FC9272",
         "#08519C",
         "#FB6A4A",
         "#2171B5",
         "#CB181D",
         "#6BAED6" 
       ),
       main = "Employees per Location\n",
       main_gp = gpar(cex = 1.4, lineheight = 0.6),
       split_vertical = TRUE,
       spacing = spacing_dimequal(c(1.1,1)),
       # spacing = spacing_increase(start = unit(3, "lines"), rate = 1.5),
       labeling = labeling_values,
       rot_labels=c(30,0,0,90),
       offset_label =c(0.6,5,0, 0),
       labeling_args = list(
         set_varnames = c(
           work_location_borough_clean_proper = "Location",
           agency_name_clean = "Agency Name"
         )),
)

```

## Employees per Location - Percentages

```{r}
payroll_data_fire_police_mosaic_table <-
payroll_data_fire_police |>
  group_by(agency_name, work_location_borough) |>
  summarise(
    count_of_employees = n(), 
    # total_salary_paid  = sum(total_paid), 
    .groups = 'drop')|>
  group_by(work_location_borough) |> # Group by fiscal_year and agency_name for percentage calculations
  mutate(
    percentage_count_of_employees = paste0(format(round(count_of_employees / sum(count_of_employees) * 100,1),nsmall=1)," %"),
    sum(count_of_employees)
    
  ) |>
  ungroup() |> 
  # arrange(agency_name,percentage_count_of_employees) |> 
  mutate(Agency = agency_name) |> 
  dplyr::select(Agency, work_location_borough,percentage_count_of_employees) |> 
  pivot_wider(names_from = work_location_borough, 
              values_from = percentage_count_of_employees)
  
  
  kable(payroll_data_fire_police_mosaic_table,
      # caption = "Dataset Format", 
      align = "lccccc") |>
  kable_styling(full_width = FALSE)|> 
  row_spec(which(payroll_data_fire_police_mosaic_table$Agency == "FIRE DEPARTMENT"),   background = "#f94144", color = "white") |> 
  row_spec(which(payroll_data_fire_police_mosaic_table$Agency == "POLICE DEPARTMENT"), background = "deepskyblue3", color = "white")
```
:::
\

Salary distributions also vary by location. Brooklyn (Fire) and Manhattan (Police) have the lowest median salaries, despite hosting the highest number of employees (indicated by the density of jittered dots). Staten Island, on the other hand, has the highest median salary for both agencies but the lowest number of employees.

Additionally, the Fire Departmentâ€™s salary boxes on the x-axis are slightly to the left of the Police Departmentâ€™s, indicating slightly higher salaries. An intriguing observation is the presence of negative salary outliers, which could reflect advanced compensation repayments, deductions, or other adjustments beyond the gross amount.



```{r}
#| fig-width: 8
#| fig-height: 5
#| message: false
#| warning: false 


payroll_data_fire_police |> 
  mutate(agency_name_clean = str_remove(agency_name, " DEPARTMENT")) |> 

ggplot() +
  geom_boxplot(mapping = aes(x = total_paid, 
                             y = fct_rev(as.factor(work_location_borough)),
                             color=agency_name_clean,
                             ),
               outlier.alpha = 0.25,
               outlier.stroke = 0.6,
               # outlier.color = "#00a6de",
               # outlier.shape = "|",
               ) +
  geom_jitter(mapping = aes(x = total_paid,
                            y = work_location_borough,
                            color=agency_name,
                            # alpha = ifelse(agency_name == "POLICE DEPARTMENT", 0.0008, 0.01)
                            ),
              width = 0.25,
              height = 0.25,
              size = 0.001,
              # alpha = 0.008,
              alpha = ifelse(payroll_data_fire_police$agency_name == "POLICE DEPARTMENT", 0.008, 0.02),
              #color='deepskyblue4',
              ) +
  scale_alpha_identity() +
  facet_grid(agency_name ~ .) +
  scale_fill_manual(
    values = c("POLICE DEPARTMENT" = "#00537d", "FIRE DEPARTMENT" = "#910002")
  ) +
  scale_color_manual(
    values = c("POLICE DEPARTMENT" = "#00a6de",
               "FIRE DEPARTMENT" = "#f94144",
               "POLICE" = "#00537d", 
               "FIRE" = "#910002"
               )
  ) +
  scale_x_continuous(
    # limits = c(-25000, 300000),
    breaks = seq(-200000, max(payroll_data_fire_police$total_paid, na.rm = TRUE), by = 100000),
    labels = scales::label_number(scale = 1/1000, suffix = "k")
  ) +
  # scale_x_log10(labels = scales::label_comma()) +
  labs(title = "Salary Paid per Location",
       x = "Salary Paid (Regular + Overtime + Other Compensation)",
       y = "Location") +
  theme_minimal() +
  theme_light() +
  theme(legend.position = "none",
         panel.grid.minor.x = element_blank() ,
         panel.grid.minor.y = element_blank() ,
         panel.grid.major.y = element_blank() ,
         panel.grid.major.x = element_line(colour = "gray",linetype="dashed",size=0.1),
         )
```

\
\




## Three Mountains of Money

### Overall Distributions

Analyzing the salary distributions reveals a trimodal pattern for the combined departments.

When separating the distributions by agency, the Fire Department shows three distinct density peaks. The leftmost peak is higher than the middle, which in turn is higher than the right. This suggests that a larger proportion of Fire Department employees fall within the leftmost peak, earning between $110,000 and $140,000.

In contrast, the Police Department's highest density peak occurs in the center mode, with most employees earning between $50,000 and $70,000.

Overall, the Fire Department has a higher mean salary of $103,000 compared to the Police Department's $87,000.




```{r}
#| fig-width: 10
#| fig-height: 9
#| message: false
#| warning: false



# Calculate mean and sd for each agency_name
facet_stats <- payroll_data_fire_police |>
  group_by(agency_name) |>
  summarise(
    mean_total_paid = mean(total_paid, na.rm = TRUE),
    sd_total_paid = sd(total_paid, na.rm = TRUE)
  )

# Create a custom function to generate a normal curve
normal_curve_data <- function(mean, sd, x_range, n = 100) {
  x <- seq(x_range[1], x_range[2], length.out = n)
  y <- dnorm(x, mean = mean, sd = sd)
  data.frame(x = x, y = y)
}

# Generate data for normal curves for each facet
normal_curve <- facet_stats |>
  rowwise() |>
  mutate(
    curve_data = list(
      normal_curve_data(
        mean = mean_total_paid,
        sd = sd_total_paid,
        x_range = c(-250000, 300000)  # Define the x-axis range
      )
    )
  ) |>
  unnest(curve_data)  # Unnest the list-column into rows

vertical_line_glyph <- function(data, params, size) {
  grid::linesGrob(
    x = c(0.5, 0.5), y = c(0.1, 0.9),
    gp = grid::gpar(col = alpha(data$colour, data$alpha), lwd = size)
  )
}




chart_01 <-
ggplot(payroll_data_fire_police) +
  geom_histogram(mapping = aes(x = total_paid, 
                               y = after_stat(density), 
                               fill = "Density Histogram"),
                 binwidth = 10000,
                 color = "blue",
                 linetype = "solid",
                 # center = 100000,
                 # boundary = c(-50000,10000),
                 # bo==
                 )+
  geom_density(mapping = aes(x = total_paid, 
                             color = "Density Curve"),
               lwd = 1.2,
               key_glyph = draw_key_path
               ) +
  geom_function(fun = dnorm,
                aes(x = total_paid, 
                    color = "Normal Curve"), 
                lwd= 1.2,
                args = list(mean = mean(payroll_data_fire_police$total_paid, na.rm = TRUE),
                            sd = sd(payroll_data_fire_police$total_paid, na.rm = TRUE)),
                ) +
  scale_color_manual(values = c("Density Curve" = "red", "Normal Curve" = "limegreen")) +
  scale_fill_manual(values = c("Density Histogram" = "lightblue")) +
  scale_x_continuous(
    limits = c(-25000, 300000),
    breaks = seq(-50000, max(payroll_data_fire_police$total_paid, na.rm = TRUE), by = 25000),
    labels = scales::label_number(scale = 1/1000, suffix = "k")
  ) +
  labs(title = "Combined Density Histogram of Salary Paid for Fire and Police Departments",
       x = "Salary Paid",
       y = "Density",
       color = "Curves",
       fill = "Bars", 
       # caption = "Blue: Histogram, Red: Data Density Curve, Green: Normal Curve"
       ) +
  # theme_minimal() +
  theme(text = element_text(size = 14))+
  theme(legend.position = "none")





chart_02 <-
# Plot
ggplot(payroll_data_fire_police) +
  geom_histogram(
    mapping = aes(x = total_paid, y = after_stat(density), fill = "Density Histogram"),
    binwidth = 10000,
    color = "blue",
    linetype = "solid"
  ) +
  geom_density(
    mapping = aes(x = total_paid, color = "Density Curve"),
    lwd = 1.2,
    key_glyph = draw_key_path
  ) +
  geom_line(
    data = normal_curve,
    aes(x = x, y = y, color = "Normal Curve"),
    lwd = 1.2
  ) +
    geom_vline(
    data = facet_stats,
    aes(xintercept = mean_total_paid, color = "Mean Reference Line"),
    linetype = "dashed",
    show.legend = TRUE,key_glyph = "path"
  ) +
  geom_text(
    data = facet_stats,
    aes(
      x = mean_total_paid,
      y = 0.00001,  # Adjust position for label
      label = scales::label_number(scale = 1 / 1000, suffix = "k")(mean_total_paid)
    ),
    inherit.aes = FALSE,
    color = "purple",
    size = 6,
    angle = 90,  # Rotate text vertically
    vjust = 1.5,
    hjust = 0.6
  ) +
  facet_wrap(~ agency_name) +
  # scale_color_manual(values = c("Density Curve" = "red", "Normal Curve" = "limegreen", "Mean Reference Line" = "purple")) +
  scale_color_manual(
    values = c(
      "Density Curve" = "red",
      "Normal Curve" = "limegreen",
      "Mean Reference Line" = "purple"
    ),
    guide = guide_legend(override.aes = list(
      `Density Curve` = list(linetype = "solid"),
      `Normal Curve` = list(linetype = "solid"),
      `Mean Line` = list(linetype = "solid")
    ))
  ) +
  scale_fill_manual(values = c("Density Histogram" = "lightblue")) +
  scale_x_continuous(
    limits = c(-25000, 300000),
    breaks = seq(-50000, max(payroll_data_fire_police$total_paid, na.rm = TRUE), by = 50000),
    labels = scales::label_number(scale = 1 / 1000, suffix = "k")
  ) +
  labs(
    title = "Density Histogram of Salary Paid per Agency",
    x = "Salary Paid",
    y = "Density",
    color = "Curves",
    fill = "Bars",
    caption = "Salary Paid includes: Regular, Overtime and Other compensation."
  ) +
  scale_linetype_manual(name = "Curves", values = c("Horizontal","solid")) +
            guides(fill = guide_legend(override.aes = list(linetype = 0)),
                   # color = guide_legend(override.aes = list(linetype = c(0,4,5) ))
                   ) +
  # theme_minimal() +
  theme(text = element_text(size = 14))+
  theme(legend.position = "bottom")



# <!-- #| fig-width: 10 -->
# <!-- #| fig-height: 10 -->
# <!-- #| message: false -->
# <!-- #| warning: false -->


chart_01 + chart_02 +
  plot_layout(ncol = 1) 
```
\
\

### Isolating the Peaks

To separate the three salary peaks, we analyzed the following variables and their key factors:

-   **Pay Basis**: Per Annum, Per Hour
-   **Employment Status**: Active, Ceased
-   **Years of Experience**: Time since employment began at the agency

The rightmost peak corresponds primarily to employees in the `Per Annum - Ceased` and `Per Hour - Active` categories.

The central and left peaks are associated with `Per Annum - Active` employees and are influenced by years of experience. Most employees with 0â€“5 years of experience earn under $100,000 (central peak). The higher density in the 5â€“10-year range suggests reduced hiring in recent years and strong employee retention.

Over time, the left peak emerges around $100,000 for employees with 0â€“5 years of experience and gradually shifts upwards and leftward (toward higher salaries) as experience increases.

For employees with 15â€“20 years and 20+ years of experience, the Fire Department has a larger proportion in the left peak compared to the central peak, as shown by the visibly greater red area in the left peak on the stacked chart. This highlights that longer-tenured employees tend to earn higher salaries.



```{r}
#| fig-width: 8
#| fig-height: 7
#| message: false
#| warning: false


range_band= 50000

payroll_data_fire_police_test_2 <-
payroll_data_fire_police |> 
  # filter(fiscal_year == 2024) |>
  # filter(fiscal_year %in% c("2024","2023")) |>
  # filter(title_description %in% c("POLICE OFFICER","FIREFIGHTER")) |>
  # filter(leave_status_as_of_june_30 == "ACTIVE") |>
   mutate(
    flag_regular = ifelse(regular_gross_paid == 0, "No", "Yes"),
    flag_overtime = ifelse(total_ot_paid == 0, "No", "Yes"),
    flag_other = ifelse(total_other_pay == 0, "No", "Yes")
  ) |> 
    mutate(
    # Define the range for breaks, including the floor of minimum to handle negative values
    total_paid_group = cut(
      total_paid,
      breaks = seq(
        floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
        ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
        by = range_band
      ),
      labels = paste0(
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band - 1) * range_band,
          by = range_band
        ) / 1000,
        "k-",
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band + range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
          by = range_band
        ) / 1000,
        "k"
      ),
      include.lowest = TRUE,
      right = FALSE
    )
  ) |> 
  mutate(
    total_paid_group = recode(
      total_paid_group,
      "-200k--150k" = "Less than 0",
      "-150k--100k" = "Less than 0",
      "-100k--50k" = "Less than 0",
      "-50k-0k" = "Less than 0",
      "0k-50k" = "0k-50k",
      "50k-100k" = "50k-100k",
      "100k-150k" = "100k-150k",
      "150k-200k" = "150k-200k",
      "200k-250k" = "200k-250k",
      "250k-300k" = "250k and above",
      "300k-350k" = "250k and above",
      "350k-400k" = "250k and above",
      "400k-450k" = "250k and above",
      "450k-500k" = "250k and above",
      "500k-550k" = "250k and above",
      "550k-600k" = "250k and above",
      "600k-650k" = "250k and above"
    ),
    total_paid_group = factor(total_paid_group, 
                              levels = c("250k and above", "200k-250k", 
                                         "150k-200k", "100k-150k", "50k-100k", 
                                         "0k-50k", "Less than 0"))
  ) |> 
  mutate(
    flag_regular = factor(flag_regular, levels = c("Yes", "No")),
    flag_overtime = factor(flag_overtime, levels = c("Yes", "No")),
  ) |> 
mutate(
    years_at_agency = 2024 - agency_start_date_year,  # Calculate the years worked
    years_band = case_when(
      years_at_agency >= 0 & years_at_agency <= 5 ~ "0-5 years",
      years_at_agency > 5 & years_at_agency <= 10 ~ "5-10 years",
      # years_at_agency > 10 & years_at_agency <= 20 ~ "10-20 years",
      years_at_agency > 10 & years_at_agency <= 15 ~ "10-15 years",
      years_at_agency > 15 & years_at_agency <= 20 ~ "15-20 years",
      years_at_agency > 20 ~ "20+ years",
      TRUE ~ "Unknown"  # In case of any missing or incorrect data
    ),
    years_band = factor(years_band, levels = c("20+ years", "15-20 years", "10-15 years", "5-10 years", "0-5 years"))
  ) |> 
  mutate(total_paid_group_fill = total_paid_group,
years_band_group = years_band)





# <!-- #| fig-width: 8 -->
# <!-- #| fig-height: 7 -->
# <!-- #| message: false -->
# <!-- #| warning: false -->

payroll_data_fire_police_test_2 |> 
 # filter(fiscal_year %in% c("2024")) |>
  # filter(fiscal_year %in% c("2023")) |>
  # filter(fiscal_year %in% c("2022")) |>
  # filter(agency_name == "POLICE DEPARTMENT") |>
  # filter(leave_status_as_of_june_30 == "ACTIVE") |>
  filter(leave_status_as_of_june_30 %in% c("ACTIVE","CEASED")) |>
  filter(pay_basis %in% c("per Annum","per Hour")) |>
  filter(!years_band_group %in% c(NA)) |>
  # filter(pay_basis == "per Annum") |>
  # filter(pay_basis == "per Hour") |>
  # filter(str_detect(title_description, "POLICE OFFICER|P\\.O\\.")) |>
  # filter(str_detect(title_description, "P\\.O\\.")) |>
  # filter(str_detect(title_description, "POLICE OFFICER")) |>
  mutate(pay_basis_and_leave = paste0(pay_basis," - ",leave_status_as_of_june_30)) |> 
  filter(pay_basis_and_leave %in% c("per Annum - ACTIVE","per Annum - CEASED","per Hour - ACTIVE")) |>



ggplot() +
  geom_density(mapping = aes(x = total_paid,after_stat(count),fill=agency_name),
               alpha = 0.5,
               # na.rm = TRUE,
               # trim =TRUE,
               # stat = "density",
                position = "stack",
               bounds = c(-50000,300000)
               ) +
  # scale_fill_manual(values = c("In state" = "yellow",
  #                              "Out of state" = "red",
  #                              "In district" = "cyan")) +
  facet_grid(years_band_group ~ pay_basis_and_leave)+
  scale_fill_manual(
    values = c("POLICE DEPARTMENT" = "deepskyblue3", "FIRE DEPARTMENT" = "#f94144"))+
  labs(title = "Salary paid per Pay Basis over years of experience",
       x = "Salary Paid",
       y = "Density",
       fill = "Agency",
       caption = "Pay Basis: per Annum, per Hour. ACTIVE and CEASED refer to the person's employment contract status."
       )+
  # theme_minimal() +
  scale_x_continuous(
    limits = c(-15000, 250000),
    breaks = seq(-200000, max(payroll_data_fire_police$total_paid, na.rm = TRUE), by = 100000),
    labels = scales::label_number(scale = 1/1000, suffix = "k"),
    # expand = expansion(add = c(10, 0))
  ) +
  theme_light() +
  # theme_minimal() +
  theme(
    legend.position = "bottom",
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_blank(),
    )

```


\
\

### Ten Years of Salaries

The distribution of salaries paid shows small variations over most of the 10-year period, except for a few distinct years where notable changes occur in each agencyâ€™s density.

For the Fire Department, the most significant change begins in 2022. There is a noticeable increase in employees receiving higher compensation (evidenced by the curve stretching and the left peak shifting further left). Additionally, there is a surge in employees receiving lower salaries, creating a bump in the right area of the curve.

For the Police Department, 2024 brings a dramatic shift in the salary curve. A new bump appears on the right, representing a large number of employees earning less than $25,000. This is primarily associated with `Per Annum - Ceased` police officers in 2024. At the same time, the left peak shifts further left, reflecting higher compensation for some employees.


```{r}
#| fig-width: 9
#| fig-height: 5
#| message: false
#| warning: false


payroll_data_fire_police |> 
  # filter(fiscal_year %in% c(2023,2024)) |> 
  mutate(fiscal_year_name = as.character(fiscal_year)) |> 
ggplot() +
  geom_density_ridges(mapping= aes(x = total_paid,
                                   y = fiscal_year_name,
                                   color = agency_name,
                                   fill = agency_name,
                                   ),
                      alpha=0.15,
                      bandwidth = 10000,
                      # jittered_points = TRUE,
                      # position = position_raincloud(adjust_vlines = TRUE),
                      position = "raincloud",
                      quantiles = 2, quantile_lines = TRUE,
                      vline_width = 1, vline_color = "darkgreen",
                      # point_alpha = 0.01,
                      # point_size = 0.001,
                      # color='deepskyblue4',
                      rel_min_height = 0.002,
                      ) +
  facet_wrap(~ agency_name) +
  # facet_grid(agency_name~pay_basis) +
   scale_x_continuous(
    limits = c(-25000, 300000),
    breaks = seq(-200000, max(payroll_data_fire_police$total_paid, na.rm = TRUE), by = 100000),
    labels = scales::label_number(scale = 1/1000, suffix = "k")
  ) +
  scale_y_discrete(
    expand = expansion(add = c(0.1, 1.5)) # Add space above the highest category
  ) +
  scale_color_manual(
    values = c("POLICE DEPARTMENT" = "deepskyblue3", "FIRE DEPARTMENT" = "#f94144")
  ) +
  scale_fill_manual(
    values = c("POLICE DEPARTMENT" = "deepskyblue3", "FIRE DEPARTMENT" = "#f94144")
  ) +
  labs(title = "Ridgeline density plot of Salary Paid by Fiscal Year",
       x = "Salary Paid",
       y = "Fiscal Year",
       color = "Agency",
       fill = "Agency",
       caption = "Salary Paid includes: Regular, Overtime and Other compensation.\nGreen Vertical Line: Mean of each density curve.")+
    theme_minimal() +
  # scale_linetype_manual(name = "Curves", values = c("Horizontal","solid")) +
            guides(fill = guide_legend(override.aes = list(linetype = 0)))+
theme(
    legend.position = "bottom",
    # plot.margin = margin(t = 200, r = 5, b = 5, l = 5) # Add top margin (t = 20)
  )
```




## Why Is 2024 So High?

The total salary paid by the Police Department in 2024 is unusually high. Comparing 2023 and 2024, we see an increase of **7,285** employees receiving salaries and a **$2 billion** rise in total compensation.

Analyzing the total salary differences by position reveals that the top 10 positions with the highest increases account for 97% of the overall compensation difference. 


```{r}
#| fig-width: 8
#| fig-height: 6
#| message: false
#| warning: false


payroll_data_fire_police |> 
  filter(fiscal_year %in% c("2024", "2023")) |>
  filter(agency_name == "POLICE DEPARTMENT") |>
  # filter(leave_status_as_of_june_30 == "ACTIVE") |>
  group_by(fiscal_year, title_description) |> 
  summarise(
    total_paid = sum(total_paid, na.rm = TRUE),
    .groups = 'drop'
  ) |>
  pivot_wider(names_from = fiscal_year, values_from = total_paid) |> 
  mutate(
    difference = `2024` - `2023`,
    difference_perc = (`2024` - `2023`) / `2023` * 100
  ) |>
  filter(difference > 0) |>
  arrange(desc(difference)) |> 
  mutate(
    label = ifelse(row_number() <= 10, title_description, NA),  # Add labels for top 10
    is_top10 = factor(row_number() <= 10, levels = c(TRUE, FALSE), labels = c("Top 10", "Other Job Titles")) # Custom order
   ) |> 
  ggplot() +
  geom_point(
    mapping = aes(
      x = difference, 
      y = difference_perc, 
      fill = difference, 
      color = is_top10
    ),
    size = 3,
    alpha = 0.7,
    stroke = 0.6,
    na.rm = TRUE,
    shape = 21 # Use shape 21 to apply both color and fill
  ) +
  geom_label_repel(
    aes(
      x = difference,
      y = difference_perc,
      label = label
    ),
    na.rm = TRUE,
    size = 3,      # Text size
    box.padding = 0.35, # Padding around text box
    point.padding = 0.3, # Space between point and label
    segment.color = "grey50", # Line color connecting label to point
    max.overlaps = 10,  # Limits overlapping labels
    max.iter = 10000,
    nudge_y = 190,
    # nudge_x = 1,
    force = 170,
    # force_pull = 1,
  ) +
  scale_fill_distiller(
    palette = "Blues", 
    direction = 1, 
    limits = c(0, 7000000),
    # limits = c(0, 200000000)
    # oob = scales::oob_squish, # Ensures values outside the range are treated properly
    na.value = "orange",
    labels = scales::label_number(scale = 1 / 1000000, suffix = "M"), # Display in millions
    breaks = c(0, 5000000, 10000000), # Custom ticks
    name = "Salary Paid Difference YoY", # Legend title
    guide = "none" 
  ) +
  scale_color_manual(
    values = c("Top 10" = "orange", "Other Job Titles" = 'deepskyblue3'), # Red for top 10, no fill for others
    # labels = c("TRUE" = "Top 10", "FALSE" = "Other Job Titles"), # Custom labels
     # alpha = c("TRUE" = 1, "FALSE" = 0),
    guide = "none" # Remove legend for fill
  ) +
  labs(
    x = "Salary Paid Diffence Year over Year", 
    y = "Percentage Difference Year over Year", 
    title = "Salary Paid Diffence between 2023 and 2024", 
    color = "Positions contributing to the Total Salary Paid"
  ) +
  # geom_vline(xintercept=0,color='grey')+
  scale_x_log10(
    # labels = scales::label_comma(),
    # limits = c(-100000, 300000),
    breaks = c(0, 10000,100000, 1000000, 10000000, 100000000,1000000000,10000000000),
    labels = c("0","10K","100K", "1M", "10M", "100M","1B","10B"),
    # expand = expansion(add = c(1, 0))
                ) +
  scale_y_continuous(
    limits = c(0, 300),
     labels = scales::label_percent(scale = 1, suffix = "%") # Add % suffix
  ) +
  guides(color = guide_legend(override.aes = list(size = 4))) +
  theme_minimal() +
  # theme_light() +
  theme(
    panel.grid.minor.x = element_blank(), # Remove minor grid lines on x-axis
    legend.position = "bottom"           # Move legend to bottom
  )

```

\
\

Notably, the Police Officer position alone added 6,728 employees in 2024, accounting for 92% of the increase in staff receiving salaries. 

However, this surge in new hires is not the sole reason for the **$1.4 billion** rise in salaries observed for this position, as shown in the chart above. The overall increase in salary payouts across all Police Officers and related positions between 2023 and 2024 also significantly contributed to the higher total paid compensation.


```{r}
#| fig-width: 8
#| fig-height: 4

library(RColorBrewer)

payroll_data_fire_police |> 
  filter(fiscal_year %in% c("2024","2023")) |>
  filter(agency_name == "POLICE DEPARTMENT") |>
  # filter(leave_status_as_of_june_30 == "ACTIVE") |>
  # filter(str_detect(title_description, "POLICE OFFICER|P\\.O\\.")) |> 
  group_by(fiscal_year,title_description) |> 
  summarise(
    total_records = n(),
    # total_paid = sum(total_paid),
    .groups = 'drop'
  ) |>
  pivot_wider(names_from = fiscal_year, values_from = total_records) |> 
  mutate(difference = `2024`-`2023`,
         difference_perc = (`2024`-`2023`)/`2023` * 100,) |> 
  # arrange(difference)
  # arrange(desc(`difference_perc`))
  arrange(desc(`difference`)) |> 
  dplyr::select(title_description,difference) |> 
  mutate(
    title_description = ifelse(row_number() <= 10, title_description, "Other")
  ) |> 
  group_by(title_description) |> 
  summarise(
    total_difference = sum(difference, na.rm=TRUE),
    .groups = 'drop'
  ) |> 
  arrange(desc(total_difference)) |> 
mutate(
    fill_color = ifelse(
      title_description == "Other", 
      "gray", 
      c("#03045eff", "#023e8aff", "#0077b6ff", "#0096c7ff", "#00a5d0ff", "#00b4d8ff", "#48cae4ff", "#90e0efff", "#ade8f4ff", "#caf0f8ff")[rank(-total_difference)]
    )
  ) |> 

# Create the bar chart
ggplot(aes(
  y = reorder(title_description, ifelse(title_description == "Other", -Inf, total_difference)),
  x = total_difference,
  fill = fill_color
)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  geom_text(
    aes(
      label = total_difference,
      hjust = ifelse(total_difference > 0, -0.1, 1.1),
    ),
    # position = position_stack(vjust = 0.5),
    # hjust = -1.2,
    
    size = 3, # Adjust text size
    color = "skyblue4" # Text color
  ) +
  scale_fill_identity() + # Use identity to apply pre-assigned colors
  # coord_flip() +
  labs(
    title = "Total Employee Difference Between 2023 and 2024",
    y = "Position",
    x = "Number of Employees"
  ) +
  scale_x_continuous(
    limits = c(-1000, 7500),
    expand = expansion(add = c(1000,0))) +
  # theme_minimal() +
  # theme_classic() +
  theme_light() +
  theme(
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.y = element_blank(),
    plot.margin = margin(10, 20, 10, 20),
    plot.title.position = "plot",
  )
  
```

\
\


## The More I Work, the More I Get Paid

Our next analysis focuses on **Years of Experience** groups and their relationship to **Salary ranges**, which include Regular pay, Overtime, and Other compensations. Letâ€™s take a look at the 2024 fiscal year.

For both departments, the majority of employees in the 0â€“5 years of experience group earn less than $100,000. In the next group (5â€“10 years), we observe a notable presence of employees earning between $150,000 and $200,000, with the Fire Department having a higher percentage of employees in this range compared to others. Additionally, there are employees in the $200,000â€“$250,000 range within this group.

The 10â€“20 years of experience group shows the highest proportion of employees in the $200,000â€“$250,000 range, and we also see some employees making $250,000 or more.

The 20+ years group includes employees across all salary ranges. Interestingly, both agencies have a number of employees in this group earning less than $50,000. For the Fire Department, the larger salary ranges for this group are $200,000â€“$250,000 and $250,000+.

Overall, while both departments show a clear trend of higher salaries with more years of experience, the Fire Department has a higher proportion of employees with extensive experience compared to the Police Department. This suggests a more experienced workforce in the Fire Department relative to the Police Department.


```{r}
#| fig-width: 9
#| fig-height: 6
#| message: false
#| warning: false

range_band= 50000

payroll_data_fire_police_test <-
payroll_data_fire_police |> 
  filter(fiscal_year == 2024) |>
  # filter(title_description %in% c("POLICE OFFICER","FIREFIGHTER")) |>
  # filter(leave_status_as_of_june_30 == "ACTIVE") |>
   mutate(
    flag_regular = ifelse(regular_gross_paid == 0, "No", "Yes"),
    flag_overtime = ifelse(total_ot_paid == 0, "No", "Yes"),
    flag_other = ifelse(total_other_pay == 0, "No", "Yes")
  ) |> 
    mutate(
    # Define the range for breaks, including the floor of minimum to handle negative values
    total_paid_group = cut(
      total_paid,
      breaks = seq(
        floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
        ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
        by = range_band
      ),
      labels = paste0(
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band - 1) * range_band,
          by = range_band
        ) / 1000,
        "k-",
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band + range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
          by = range_band
        ) / 1000,
        "k"
      ),
      include.lowest = TRUE,
      right = FALSE
    )
  ) |> 
  mutate(
    total_paid_group = recode(
      total_paid_group,
      "-200k--150k" = "Less than 0",
      "-150k--100k" = "Less than 0",
      "-100k--50k" = "Less than 0",
      "-50k-0k" = "Less than 0",
      "0k-50k" = "0k-50k",
      "50k-100k" = "50k-100k",
      "100k-150k" = "100k-150k",
      "150k-200k" = "150k-200k",
      "200k-250k" = "200k-250k",
      "250k-300k" = "250k and above",
      "300k-350k" = "250k and above",
      "350k-400k" = "250k and above",
      "400k-450k" = "250k and above",
      "450k-500k" = "250k and above",
      "500k-550k" = "250k and above",
      "550k-600k" = "250k and above",
      "600k-650k" = "250k and above"
    ),
    total_paid_group = factor(total_paid_group, 
                              levels = c("250k and above", "200k-250k", 
                                         "150k-200k", "100k-150k", "50k-100k", 
                                         "0k-50k", "Less than 0"))
  ) |> 
  mutate(
    flag_regular = factor(flag_regular, levels = c("Yes", "No")),
    flag_overtime = factor(flag_overtime, levels = c("Yes", "No")),
  ) |> 
mutate(
    years_at_agency = 2024 - agency_start_date_year,  # Calculate the years worked
    years_band = case_when(
      years_at_agency >= 0 & years_at_agency <= 5 ~ "0-5 years",
      years_at_agency > 5 & years_at_agency <= 10 ~ "5-10 years",
      years_at_agency > 10 & years_at_agency <= 20 ~ "10-20 years",
      years_at_agency > 20 ~ "20+ years",
      TRUE ~ "Unknown"  # In case of any missing or incorrect data
    ),
    years_band = factor(years_band, levels = c("20+ years", "10-20 years", "5-10 years", "0-5 years"))
  ) |> 
  mutate(total_paid_group_fill = total_paid_group,
years_band_group = years_band)



payroll_data_fire_police_pay_range_frequency <- 
  payroll_data_fire_police_test |> 
  # select(total_paid_group,flag_regular,flag_overtime,flag_other,agency_name,total_paid_group_fill) |> 
  # select(flag_regular,flag_overtime,flag_other,total_paid_group,agency_name,total_paid_group_fill) |>
  # select(work_location_borough,flag_overtime,total_paid_group,agency_name,total_paid_group_fill) |>
dplyr::select(years_band,total_paid_group,agency_name,total_paid_group_fill,years_band_group,work_location_borough) |>
  group_by(across(everything())) |> 
  summarise(frequency = n(), .groups = 'drop')

# payroll_data_fire_police_pay_range_frequency <-
#   payroll_data_fire_police_pay_range_frequency |> 
#   mutate(total_paid_group_fill = total_paid_group)

essay_grades_frequency_lode = to_lodes_form(payroll_data_fire_police_pay_range_frequency, axes = 1:2)
essay_grades_frequency_lode$x <- factor(essay_grades_frequency_lode$x,
                                        # labels = c(1,                                                   "Total")
)



library(scales)

essay_grades_frequency_lode <- essay_grades_frequency_lode |> 
  mutate(
    stratum_width = ifelse(stratum == "Total", 2, 1) # Replace "LastStratumName" with the actual name
  )

ggplot(essay_grades_frequency_lode, 
       aes(alluvium=alluvium, x=x, stratum=stratum, y=frequency)) +
  # geom_flow(width = 0.5) +
  # geom_alluvium(decreasing = TRUE)+
  geom_alluvium(aes(fill = total_paid_group_fill), alpha = 0.8,
                # width = 0.5
                ) +
  # geom_lode() +
  
  # geom_stratum(color = "#00509d",
  #              fill='white',
  #              linewidth = 1.5,
  #              aes(fill = NA),
  #              alpha = 0.5) +
  geom_stratum(aes(fill = total_paid_group_fill),
               # width = c(0.5,0.5,0.5,2),
               # width = 0.7,
               # width =ifelse(as.character(total_paid_group_fill) == 4, 3, NA),
               # position = "jitter",
               ) +
   geom_label(stat = "stratum", 
              # aes(label = after_stat(stratum)),
              aes(label = ifelse(as.numeric(x) != 2, as.character(stratum), NA) ),
              size =3,
              ) +
  # geom_text(stat = "stratum",
  #           aes(label = paste(after_stat(stratum)
  #                             # ,                              "\n" ,after_stat(count)
  #                             )),
  #            # aes(label = ifelse(as.numeric(x) != 4, as.character(stratum), NA) ),
  #           hjust = 0.5,
  #           size = 3
  #           ) +
  scale_fill_brewer(palette = "Spectral", direction = -1, na.translate = FALSE) +
   scale_x_discrete(                   
     expand = c(.1, .1),
     labels = c("years_band" = "Years of Experience", 
                  "total_paid_group" = "Salary Range")
     ) +
# ggrepel::geom_text_repel(
#   aes(label = ifelse(as.numeric(x) == 2, as.character(stratum), NA) ),
#   stat = "stratum",
#   size = 3, direction = "y", nudge_x = 1.2
# ) +
scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +
  ggrepel::geom_label_repel(
 aes(label = ifelse(as.numeric(x) == 2, as.character(stratum), NA)),
  stat = "stratum",
  size = 3,
  direction = "y",
  nudge_x = .8,
  box.padding = 0.3, # Padding around the text
  label.padding = unit(0.25, "lines"), # Padding inside the box
  label.size = 0.5, # Border thickness
  label.r = unit(0.15, "lines"), # Corner radius of the box
  fill = "white", # Background color for the label
  color = "black" # Text color
) +
  facet_wrap(~ agency_name, scales = "free") +
# facet_wrap(~ work_location_borough, scales = "free_y") +
  # facet_grid(agency_name ~ ., scales = "free") +
# facet_wrap(~ agency_name, scales = "free_y") +
# facet_grid(years_band_group ~ agency_name, scales = "free_y") +
# facet_grid(work_location_borough ~ agency_name, scales = "free_y") +
# work_location_borough
 # facet_wrap(~ years_band_group + agency_name, scales = "free_y") + 
  labs(title = "Exploring the Relationship Between Years of Experience and Salary Ranges",
       x = "",
       y = "Number of Employees",
       fill="Salary Range") +
  theme_minimal() +
  theme(legend.position = "bottom",
         panel.spacing = unit(3, "lines"),
        legend.direction = "horizontal",
        legend.box = "horizontal", 
        legend.text = element_text(size = 10) ,
        )+
  guides(
    fill = guide_legend(
      nrow = 1,                      # Force legend items into one row
      # keywidth = 1.5, keyheight = 0.5 # Adjust key size for spacing
    )
  )
```



## Who Gets Paid the Most?

### Employees Earning Over $250K

When analyzing 2024 employees earning more than $250K, we can break down their total salary into three categories: Regular pay, Overtime, and Other compensation.

For those earning over $200K in Regular pay, itâ€™s clear that they generally do not receive Overtime compensation, although some do receive Other compensation.

Employees earning between $100K and $200K in regular pay, tend to earn significant Overtime ranging from $60K to $130K. This Overtime is the main factor contributing to their final salary being above $250K. Additionally, they receive Other compensation, ranging from $25K to $50K.

Interestingly, only 9 employees earning less than $100K in Regular pay received total compensation over $250K. Of these, 3 follow a similar pattern to the previous group (earning significant Overtime), while 6 are outliers who receive no Regular or Overtime pay but have very high Other compensation.



::: panel-tabset
## Salary Breakdown - Combined

```{r}
#| fig-width: 8
#| fig-height: 4

payroll_data_fire_police_chart_2 <-
  payroll_data_fire_police |> 
  filter(fiscal_year == 2024) |>
  # filter(title_description %in% c("POLICE OFFICER","FIREFIGHTER")) |>
  # filter(leave_status_as_of_june_30 == "ACTIVE") |>
  mutate(
    flag_regular = ifelse(regular_gross_paid == 0, "No", "Yes"),
    flag_overtime = ifelse(total_ot_paid == 0, "No", "Yes"),
    flag_other = ifelse(total_other_pay == 0, "No", "Yes")
  ) |> 
  mutate(
    # Define the range for breaks, including the floor of minimum to handle negative values
    total_paid_group = cut(
      total_paid,
      breaks = seq(
        floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
        ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
        by = range_band
      ),
      labels = paste0(
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band - 1) * range_band,
          by = range_band
        ) / 1000,
        "k-",
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band + range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
          by = range_band
        ) / 1000,
        "k"
      ),
      include.lowest = TRUE,
      right = FALSE
    )
  ) |> 
  mutate(
    total_paid_group = recode(
      total_paid_group,
      "-200k--150k" = "Less than 0",
      "-150k--100k" = "Less than 0",
      "-100k--50k" = "Less than 0",
      "-50k-0k" = "Less than 0",
      "0k-50k" = "0k-50k",
      "50k-100k" = "50k-100k",
      "100k-150k" = "100k-150k",
      "150k-200k" = "150k-200k",
      "200k-250k" = "200k-250k",
      "250k-300k" = "250k and above",
      "300k-350k" = "250k and above",
      "350k-400k" = "250k and above",
      "400k-450k" = "250k and above",
      "450k-500k" = "250k and above",
      "500k-550k" = "250k and above",
      "550k-600k" = "250k and above",
      "600k-650k" = "250k and above"
    ),
    total_paid_group = factor(total_paid_group, 
                              levels = c("250k and above", "200k-250k", 
                                         "150k-200k", "100k-150k", "50k-100k", 
                                         "0k-50k", "Less than 0"))
  ) |> 
  mutate(
    flag_regular = factor(flag_regular, levels = c("Yes", "No")),
    flag_overtime = factor(flag_overtime, levels = c("Yes", "No")),
  ) |> 
  mutate(
    years_at_agency = 2024 - agency_start_date_year,  # Calculate the years worked
    years_band = case_when(
      years_at_agency >= 0 & years_at_agency <= 5 ~ "0-5 years",
      years_at_agency > 5 & years_at_agency <= 10 ~ "5-10 years",
      years_at_agency > 10 & years_at_agency <= 20 ~ "10-20 years",
      years_at_agency > 20 ~ "20+ years",
      TRUE ~ "Unknown"  # In case of any missing or incorrect data
    ),
    years_band = factor(years_band, levels = c("20+ years", "10-20 years", "5-10 years", "0-5 years"))
  ) |> 
  mutate(total_paid_group_fill = total_paid_group,
         years_band_group = years_band)


# payroll_data_fire_police_chart_2 |> 
  # filter(total_paid_group == "250k and above") |> 
  # select(title_description) |> distinct() |> pull()





title_mapping <- c(
  "EXECUTIVE AGENCY COUNSEL" = "EXEC AGENCY CNSL",
  "COMPUTER SYSTEMS MANAGER" = "COMPUTER SYS MGR",
  "COUNSEL TO THE POLICE COMMISSIONER" = "POLICE CNSL",
  "ADMINISTRATIVE STAFF ANALYST" = "ADMIN STAFF ANALYST",
  "CAPTAIN - CHIEF OF STAFF" = "CAPT - CHIEF STAFF",
  "DEPUTY COMMISSIONER" = "DEPUTY COMM",
  "CAPTAIN DETAILED AS ASSISTANT CHIEF" = "CAPT - ASST CHIEF",
  "CAPTAIN DETAILED AS CHIEF OF TRAINING" = "CAPT - CHIEF TRAINING",
  "COMMISSIONER" = "COMMISSIONER",
  "CAPTAIN DETAILED AS CHIEF OF SPECIAL OPERATIONS" = "CAPT - SPEC OPS CHIEF",
  "CAPTAIN: CHIEF OF TRANSPORTATION BUREAU" = "CAPT - TRANS CHIEF",
  "CAPTAIN DETAILED AS CHIEF OF DETECTIVES" = "CAPT - DET CHIEF",
  "CHIEF OF INFORMATION TECHNOLOGY" = "IT CHIEF",
  "CAPT DET CHIEF OF THE HOUSING BUREAU" = "CAPT DET - HOUSING",
  "CAPT DET CHIEF OF THE TRANSIT BUREAU" = "CAPT DET - TRANSIT",
  "CAPT DET CHIEF OF INTERNAL AFFAIRS" = "CAPT DET - INTERNAL AFF",
  "CAPTAIN DETAILED AS CHIEF OF INTERAGENCY OPERATIONS" = "CAPT - INTERAGENCY OPS",
  "CAPTAIN DETAILED AS CHIEF OF CRIME CONTROL STRATEGIES" = "CAPT - CRIME CTRL",
  "SUPERVISING CHIEF SURGEON" = "CHIEF SURGEON",
  "CAPT DET CHIEF OF DEPARTMENT" = "CAPT DET - DEPT CHIEF",
  "SENIOR STATIONARY ENGINEER" = "SR STAT ENG",
  "CAPTAIN DETAILED AS CHIEF OF PATROL" = "CAPT - PATROL CHIEF",
  "CAPTAIN DETAILED AS CHIEF OF PERSONNEL" = "CAPT - PERS CHIEF",
  "SUPERVISOR OF MECHANICS" = "SUPV MECHANICS",
  "AGENCY ATTORNEY" = "AGENCY ATTY",
  "FIRST DEPUTY COMMISSIONER" = "1ST DEPUTY COMM",
  "POLICE OFFICER" = "POLICE OFFICER",
  "P.O. DA DET GR3" = "P.O. DA DET GR3",
  "P.O. DET SPEC" = "P.O. DET SPEC",
  "LIEUTENANT" = "LIEUTENANT",
  "CAPTAIN" = "CAPTAIN",
  "OILER" = "OILER",
  "SERGEANT-D/A SPECIAL ASSIGNMENT" = "SERG-SPEC ASSIGN",
  "SERGEANT-" = "SERGEANT",
  "POLICE OFFICER D/A DETECTIVE 2ND GR" = "P.O. DET 2ND GR",
  "POLICE OFFICER D/A DETECTIVE 1ST GR" = "P.O. DET 1ST GR",
  "LIEUTENANT D/A SPECIAL ASSIGNMENT" = "LIEUT-SPEC ASSIGN",
  "LIEUTENANT D/A COMMANDER OF DETECTIVE SQUAD" = "LIEUT-DETECT CMD",
  "STATIONARY ENGINEER" = "STAT ENG",
  "CAPTAIN D/A DEPUTY CHIEF" = "CAPT-DEPUTY CHIEF",
  "SERGEANT-D/A SUPERVISOR DETECTIVE SQUAD" = "SERG-DETECT CMD",
  "CAPTAIN D/A INSPECTOR" = "CAPT-INSPECTOR",
  "FIRE MEDICAL OFFICER" = "FIRE MED OFFICER",
  "ADMINISTRATOR OF MEDICAL AFFAIRS" = "ADMIN MED AFFAIRS",
  "DEPUTY ASSISTANT CHIEF OF DEPARTMENT" = "DEP ASST CHIEF",
  "ASSISTANT CHIEF OF DEPARTMENT" = "ASST CHIEF",
  "CHIEF OF DEPARTMENT" = "CHIEF OF DEPT",
  "SUPERVISING EMERGENCY MEDICAL SERVICE SPECIALIST" = "SUPV EMS SPEC",
  "ASSISTANT CHIEF FIRE MARSHAL" = "ASST CHIEF MARSHAL",
  "SUPERVISOR ELECTRICIAN" = "SUPV ELECTRICIAN",
  "CHIEF FIRE MARSHAL" = "CHIEF MARSHAL",
  "FIREFIGHTER" = "FIREFIGHTER",
  "MARINE ENGINEER" = "MARINE ENGINEER",
  "WIPER" = "WIPER",
  "PILOT" = "PILOT",
  "BATTALION CHIEF" = "BATTALION CHIEF",
  "SUPERVISING FIRE MARSHAL" = "SUPV FIRE MARSHAL",
  "FIRE MARSHAL" = "FIRE MARSHAL",
  "DEPUTY CHIEF" = "DEPUTY CHIEF",
  "AUTO MECHANIC" = "AUTO MECHANIC"
)




payroll_data_fire_police_chart_2_250 <-
payroll_data_fire_police_chart_2 |> 
  filter(total_paid_group == "250k and above") |> 
  # filter(total_paid_group == "0k-50k") |> 
  mutate(title_description_short = title_mapping[title_description]) |> 
  mutate(agency_name_order = ifelse(agency_name == "FIRE DEPARTMENT", "ag-002","ag-001"))


# 
# payroll_data_fire_police_chart_2_250 |> 
#   select(title_description_short) |> distinct() |> 
#   arrange(desc(title_description_short)) |> 
#   mutate(order_sequence = paste0("000-",sprintf("%05d", row_number())))

title_order_sequence <- 
  payroll_data_fire_police_chart_2_250 |> 
  dplyr::select(title_description_short) |> 
  distinct() |> 
  arrange(desc(title_description_short)) |> 
  mutate(order_sequence = paste0("000-", sprintf("%05d", row_number())))

# Perform a left join to add order_sequence
payroll_data_fire_police_chart_2_250 <- 
  payroll_data_fire_police_chart_2_250 |> 
  left_join(title_order_sequence, by = "title_description_short")

title_description_list <- 
  payroll_data_fire_police_chart_2_250 |> 
  dplyr::select(title_description_short) |> 
  distinct(title_description_short) |> 
  arrange(title_description_short) |> 
  pull(title_description_short)

# View the list
# print(as.character(title_description_list))


payroll_data_fire_police_chart_2_250_selection <-
  payroll_data_fire_police_chart_2_250 |> 
  # filter(regular_gross_paid >= 250000) |> 
  mutate(agency_name_factor = as.factor(agency_name)) |> 
  mutate(regular_paid_group = as.factor(
    dplyr::if_else(regular_gross_paid>= 200000, "200k and above", 
                   dplyr::if_else(regular_gross_paid>= 100000 & regular_gross_paid< 200000, "100k-200k", 
                                      "Less than 100k"))
  )
         )|> 
  mutate(regular_paid_group = fct_relevel(regular_paid_group, "200k and above","100k-200k","Less than 100k")) |> 
  dplyr::select(
    agency_name_factor,
    # title_description_short,
    regular_paid_group,
    regular_gross_paid,
    total_ot_paid,
    total_other_pay,
    total_paid)

ggparcoord(data = payroll_data_fire_police_chart_2_250_selection,
           columns = 3:6,
           alphaLines = 0.1,
           groupColumn = "regular_paid_group",
           # mapping = aes(color = agency_name,fill = I("lightblue1")),
           scale="globalminmax",
           # splineFactor = 1, 
           # missing="median",
           showPoints = TRUE,
          ) +
  # geom_hline(yintercept =  2.5, color = "black", linetype = "dashed") +
  # geom_hline(yintercept = -2.5, color = "black", linetype = "dashed") +
  scale_color_manual("regular_paid_group",
                     name= 'Regular Pay Range',
                     # values = c("#0496ff", "#ade8f4", "#023e8a")) +
                     values = c("#76c893", "#d9ed92", "#4f772d")) +
  labs(x = "Variables", 
       y = "Salary", 
       title = "Salary Breakdown for Employees Earning over 250k") +
  # guides(alpha = "none") + 
  scale_x_discrete(
    labels = c(
      "regular_gross_paid" = "Regular Pay",
      "total_ot_paid" = "Overtime Pay",
      "total_other_pay" = "Other Pay",
      "total_paid" = "Total Salary\n(Regular + Overtime + Other)"
    )
  ) +
  scale_y_continuous(
    breaks = seq(0, 400000, 100000), # Adjust the breaks
    labels = scales::label_number(scale = 1 /1000, suffix = "K") # Show in 'K' format
  ) +
  theme_classic()

```
## Salary Breakdown - Faceted by Range

```{r}
#| fig-width: 8
#| fig-height: 4

payroll_data_fire_police_chart_2_250_selection <-
  payroll_data_fire_police_chart_2_250 |> 
  # filter(regular_gross_paid >= 250000) |> 
  mutate(agency_name_factor = as.factor(agency_name)) |> 
  mutate(regular_paid_group = as.factor(
    dplyr::if_else(regular_gross_paid>= 200000, "200k and above", 
                   dplyr::if_else(regular_gross_paid>= 100000 & regular_gross_paid< 200000, "100k-200k", 
                                      "Less than 100k"))
  )
         )|> 
  mutate(regular_paid_group = fct_relevel(regular_paid_group, "200k and above","100k-200k","Less than 100k")) |> 
  dplyr::select(
    agency_name_factor,
    # title_description_short,
    regular_paid_group,
    regular_gross_paid,
    total_ot_paid,
    total_other_pay,
    total_paid)

ggparcoord(data = payroll_data_fire_police_chart_2_250_selection,
           columns = 3:6,
           alphaLines = 0.1,
           groupColumn = "regular_paid_group",
           # mapping = aes(color = agency_name,fill = I("lightblue1")),
           scale="globalminmax",
           # splineFactor = 1, 
           # missing="median",
           showPoints = TRUE,
          ) +
  # geom_hline(yintercept =  2.5, color = "black", linetype = "dashed") +
  # geom_hline(yintercept = -2.5, color = "black", linetype = "dashed") +
  scale_color_manual("regular_paid_group",
                     name= 'Regular Pay Range',
                     # values = c("#0496ff", "#ade8f4", "#023e8a")) +
                     values = c("#76c893", "#d9ed92", "#4f772d")) +
  labs(x = "Variables", 
       y = "Salary", 
       title = "Salary Breakdown for Employees Earning over 250k- Faceted by Range") +
  # guides(alpha = "none") + 
  facet_wrap(~ regular_paid_group) + 
  scale_x_discrete(
    labels = c(
      "regular_gross_paid" = "Regular Pay",
      "total_ot_paid" = "Overtime Pay",
      "total_other_pay" = "Other Pay",
      "total_paid" = "Total Salary"
    )
  ) +
  scale_y_continuous(
    breaks = seq(0, 400000, 100000), # Adjust the breaks
    labels = scales::label_number(scale = 1 /1000, suffix = "K") # Show in 'K' format
  ) +
  theme_classic()+
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 45, hjust = 1),
    )

```

:::

\

### Salary Playground

Using the same data, you can perform different combinations and scenarios for a deeper analysis. The following interactive parallel coordinates chart provides a detailed breakdown of salary components (Regular, Overtime, Other) for employees earning over $250K, along with their job titles and departments.


::: callout-note
## Make a selection in the chart by clicking, holding, and dragging your mouse across each vertical axis.
:::

```{r}
#| fig-width: 8
#| fig-height: 11
#| message: false
#| warning: false

parcoords(
  payroll_data_fire_police_chart_2_250[, c(
    # "agency_name_order", 
    "order_sequence",
    "agency_name_order", 
    # "title_description_short",
    "regular_gross_paid",
    "total_ot_paid",
    "total_other_pay",
    "total_paid"
  )], 
  rownames = FALSE,
  brushMode = "1D-axes",
  reorderable = TRUE,
  queue = TRUE,
  alpha = 0.25,
  alphaOnBrushed = 0.1,
  height = 750,
  dimensions = list(
    # outliers_rank = list(
    #   title = "outliers_rank",
    #   tickValues = c("High","Not an Outlier","Low")
    # ),
    agency_name_order = list(
      title = "Agency",
      tickValues = c("FIRE","POLICE")
    ),
    order_sequence = list(
      title = "Job Title",
      tickValues = as.character(title_description_list)
    ),
    regular_gross_paid = list(title = "Regular Pay"),
    total_ot_paid = list(title = "Overtime Pay"),
    total_other_pay = list(title = "Other Pay"),
    total_paid = list(title = "Total Salary (Reg+Ovt+Oth)")
  ),
  # color = list(
  #   colorBy = "outliers_rank",  
  #   colorScale = "scaleOrdinal",
  #   colorScheme = outliers_colors
  # ),
   color = list(
    colorBy = "agency_name_order",  
    colorScale = "scaleOrdinal",
    colorScheme = c("#0099CC", "#f94144")
  ),
  withD3 = TRUE,
  margin = list(
    top = 30,    # Adjust top margin
    right = 40,  # Adjust right margin
    bottom = 30, # Adjust bottom margin
    left = 125   # Increase left margin for better spacing
  )
)
```
<!-- ::: -->

\
\


## Understanding the Gap: Regular Pay and Total Salary

In this analysis, we explore the gap between Regular Pay and Total Salary for the Top 25 most popular positions by department (ranked by employee count). We will examine three key variables for each position:

-   **Regular Salary Paid**: Mean regular salary for each position.
-   **Total Salary Paid**: Mean salary including Regular, Overtime, and Other Pay.
-   **Ratio**: The ratio of Total Salary Paid to Regular Salary Paid.

For the Fire Department, the percentage of additional compensation (Overtime + Other) varies widely across positions. More than 50% (13 out of 25) of these positions earn less than 25% above their regular pay in additional compensation. However, positions such as Captain and Lieutenant receive more than 70% additional pay on top of their regular salary.

In the Police Department, positions earning a mean regular salary below $100K do not receive a high amount of Overtime or Other compensation. All positions in this category earn less than 50% above their regular salary in additional pay. On the other hand, most positions earning a regular salary above $100K see a significant proportion (greater than 50%) of additional compensation to their salaries.

```{r}
#| fig-width: 8
#| fig-height: 10
#| message: false
#| warning: false


title_descriptions_top_fire <-
payroll_data_fire_police |>
  filter(fiscal_year == "2024") |>
  filter(leave_status_as_of_june_30 == 'ACTIVE') |>
  group_by(agency_name, title_description) |>
  summarise(
    Total_records = n(),
    .groups = "drop"
  ) |>
  filter(agency_name == 'FIRE DEPARTMENT') |>
  group_by(agency_name) |>
  slice_max(order_by = Total_records, n = 25) |>
  ungroup() |>
  pull(title_description)



title_descriptions_top_police <-
payroll_data_fire_police |>
  filter(fiscal_year == "2024") |>
  filter(leave_status_as_of_june_30 == 'ACTIVE') |>
  group_by(agency_name, title_description) |>
  summarise(
    Total_records = n(),
    .groups = "drop"
  ) |>
  filter(agency_name == 'POLICE DEPARTMENT') |>
  group_by(agency_name) |>
  slice_max(order_by = Total_records, n = 25) |>
  ungroup() |>
  pull(title_description)

title_short_fire <- c(
  "FIREFIGHTER" = "Firefighter",
    "SUPERVISING EMERGENCY MEDICAL SERVICE SPECIALIST-DPTY CHIEFS" = "Supervising EMS Specialist-Dpty Chiefs",
  "EMERGENCY MEDICAL SPECIALIST-EMT" = "EMS-EMT",
  "LIEUTENANT" = "Lieutenant",
  "EMERGENCY MEDICAL SPECIALIST-PARAMEDIc" = "EMS-Paramedic",
  "SUPERVISING EMERGENCY MEDICAL SERVICE SPECIALIST" = "Supervising EMS Specialist",
  "CAPTAIN" = "Captain",
  "BATTALION CHIEF" = "Battalion Chief",
  "ASSOCIATE FIRE PROTECTION INSPECTOR" = "Assoc. Fire Protection Inspector",
  "FIRE PROTECTION INSPECTOR" = "Fire Protection Inspector",
  "AUTO MECHANIC" = "Auto Mechanic",
  "SUPERVISING FIRE ALARM DISPATCHER" = "Supervising Fire Alarm Dispatcher",
  "FIRE ALARM DISPATCHER" = "Fire Alarm Dispatcher",
  "PRINCIPAL ADMINISTRATIVE ASSOCIATE -  NON SUPVR" = "Principal Admin Assoc-Non Supvr",
  "FIRE MARSHAL" = "Fire Marshal",
  "FIRE CADET" = "Fire Cadet",
  "DEPUTY CHIEF" = "Deputy Chief",
  "CLERICAL ASSOCIATE" = "Clerical Associate",
  "ADM MANAGER-NON-MGRL" = "Admin Manager - Non-Mgr",
  "ADMINISTRATIVE STAFF ANALYST" = "Admin Staff Analyst",

  "COMMUNICATION ELECTRICIAN" = "Communication Electrician",
  "COMPUTER SPECIALIST" = "Computer Specialist",
  "SUPERVISING FIRE ALARM DISPATCHER" = "Supervising Fire Alarm Dispatcher",
  "SUPERVISOR OF MECHANICS" = "Supervisor of Mechanics",
  "CASE - MANAGEMENT NURSE" = "Case-Mgmt Nurse",
  "EMERGENCY MEDICAL SPECIALIST TRAINEE" = "EMS-Trainee"
)

exceptions_proper <- c(
  "\\bDa\\b" = "DA",
  "\\bP\\.o\\.\\b" = "P.O.",
  "P.o.\\s" = "Police Officer ",
  "Ems\\s" = "EMS ",
  "Ems\\-" = "EMS-",
  "Ems-Emt" = "EMS-EMT"
)


# <!-- #| fig-width: 8 -->
# <!-- #| fig-height: 10 -->
# <!-- #| message: false -->
# <!-- #| warning: false -->


payroll_data_fire_police |>
  filter(fiscal_year == "2024") |>
  # filter(leave_status_as_of_june_30 == 'ACTIVE') |>
  # filter(title_description %in% title_descriptions_top10) |>
  # filter(pay_basis == 'per Annum') |>
  filter((agency_name == 'FIRE DEPARTMENT' & title_description %in% title_descriptions_top_fire) |
          (agency_name == 'POLICE DEPARTMENT' & title_description %in% title_descriptions_top_police)  ) |>    mutate(
     title_description = str_replace_all(title_description, title_short_fire)
   ) |>
  # group_by(agency_name, title_description) |>
  mutate(
    title_description = str_to_title(title_description),
    title_description = str_remove(title_description, "-$"),
    title_description = str_replace_all(title_description, exceptions_proper)
  ) |>
  group_by(agency_name, title_description, pay_basis, work_location_borough) |>
  group_by(agency_name, title_description, work_location_borough) |>
  group_by(agency_name, title_description) |>
  # group_by(agency_name, work_location_borough) |>
  summarise(
    Total_records = n(),
    mean_base_salary = mean(base_salary, na.rm = TRUE),
    mean_regular_paid = mean(regular_gross_paid, na.rm = TRUE),
    mean_total_paid = mean(total_paid, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(agency_name, desc(Total_records)) |>
  dplyr::select('agency_name',
         'title_description',
         'mean_regular_paid' ,
         'mean_total_paid') |>
  # pivot_wider(names_from = tuition_type_factor, values_from = mean_tuition) |>
  mutate(perc_diff = abs(mean_total_paid - mean_regular_paid) / mean_regular_paid * 100) |>
  mutate(perc_diff_band = cut(perc_diff,
                              breaks = c(seq(0, 1000, by = 25), Inf),
                              include.lowest = TRUE)) |>
ggplot() +
  geom_bar(aes(x = -perc_diff *2500,
               y= title_description,
               fill = perc_diff_band),
           stat = 'identity',
           alpha = 1,
  ) +
  geom_text(aes(x = -perc_diff * 2500,
                y = title_description,
                label = paste0(round(perc_diff, 0), "%")),
            hjust = 1.2,
            size = 3,
            color = "black",
            alpha = 0.8,
            check_overlap=TRUE,
  ) +

  geom_point(aes(x = mean_total_paid,
                 y = reorder(title_description, mean_total_paid),
                 color = "Total Salary"),
             # color = "#1e6091",
             alpha = 1,
             size = 1.5,
             stroke=2,
  ) +
    geom_segment(aes(x = 0,
                   xend = mean_total_paid,
                   y = reorder(title_description, mean_total_paid,),
                   yend = reorder(title_description, mean_total_paid)),
               color = "#1e6091",
               alpha=0.5,
  ) +
    geom_point(aes(x = mean_regular_paid,
                 y = reorder(title_description, mean_regular_paid),
                 color = "Regular Salary"),
             # color = "deepskyblue3",
             size = 1.5,
             alpha=1,
             stroke=2,
  ) +
  geom_segment(aes(x = 0,
                   xend = mean_regular_paid,
                   y = reorder(title_description, mean_regular_paid,),
                   yend = reorder(title_description, mean_regular_paid)),
               color = "deepskyblue3",
               alpha=1,
               
  ) +

  # geom_text(aes(x = mean_regular_paid,
  #               y = reorder(title_description, mean_regular_paid),
  #               label = scales::label_comma()(round(mean_regular_paid, 0))),
  #           hjust = -0.4,
  #           size = 3,
  #           alpha = 0.6,
  #           check_overlap=TRUE,
  # ) +
  # geom_vline(xintercept = c(-250000, -187500, -125000, -62500),
  #            linetype = "dashed",
  #            color = "gray50",
  #            alpha = 0.2) +
  facet_grid(fct_infreq(agency_name) ~ .,
             scales ='free_y',
             space = 'free_y') +
  scale_fill_brewer(name = "% Ratio:",
                    palette = "RdYlGn",
                    direction = -1,
                    na.translate = FALSE) +
  scale_color_brewer(name = "% Ratio:",
                     palette = "RdYlGn",
                     direction = -1,
                     na.translate = FALSE) +
  scale_color_manual(name = "Dots:",
                     values = c("Total Salary" = "#1e6091",
                                "Regular Salary" = "deepskyblue3")) +
  # scale_x_continuous(
  #   limits = c(-250000, 250000),
  #   name = "Regular Salary Paid (dots)",
  #   labels = function(x) ifelse(x >= 0, scales::label_number()(x), ""),
  #   sec.axis = sec_axis(~./-2500, name = "% Ratio (bars)",
  #                       labels = function(x) ifelse(x >= 0,
  #                                                   paste0(scales::label_number()(x),
  #                                                          '%'), ""))
  # ) +
  scale_x_continuous(
    limits = c(-250000, 250000),
    name = "Salary (dots)",
    breaks = c(-250000, -187500, -125000, -62500, 0, 100000,200000), # Custom breaks
    labels = c("", "", "", "", "0","100k","200k"), # Custom labels for breaks
    sec.axis = sec_axis(~./-2500, name = "% Ratio (bars)",
                        labels = function(x) ifelse(x >= 0,
                                                    paste0(scales::label_number()(x),
                                                           '%'), ""))
  ) +
  labs(
    # title = "Ratio of `Total Salary` to `Regular Salary` VS Regular Salary by Job Title, Facet by Agency",
    title =  "Understanding the Gap: Regular Pay and Total Salary",
    y = "Job Titles",
    caption = "% Ratio = Total Salary Paid (Regular + Overtime + Other) / Regular Salary Paid") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    # legend.box = "vertical",
          # legend.position = c(0, 0),             # Place the legend at the bottom left
  legend.justification = c(1, 1)      ,   # Align the legend to the left
        panel.border = element_rect(color = "darkgray", fill = NA, linewidth = 1),
        axis.title.x = element_text(hjust = 1),
        axis.title.x.top = element_text(hjust = 0),
        plot.title = element_text(hjust = 0),
  plot.title.position = "plot",
    panel.grid.minor.x = element_blank() ,
  # plot.title.justification = c(0.5, 0.5) 
  )

```




\
\
\
\

------------------------------------------------------------------------

\
\

::: callout-note
## Congratulations! You made it to the end of this section =)

Here is a quick summary of the charts you saw on this page:

-  [x] Bar Chart Stacked
-  [x] Mosaic
-  [x] Box Plot with Jitter Points
-  [x] Histogram
-  [x] Density Curve
-  [x] Normal Curve
-  [x] Density Stacked Area
-  [x] Ridgeline Density 
-  [x] Scatter Plot with Repel Labels
-  [x] Bar Chart with Lump
-  [x] Alluvium
-  [x] Parallel Coordinates 
-  [x] Parallel Coordinates - Interactive (parcoords)
-  [x] Lollipop Chart Combo


<!-- -  [x] hitogram / facets (ps1) -->
<!-- -  [x] boxplot jitter (ps1) -->
<!-- -  [x] with ridgeline (ps1) -->
<!-- -  [ ] density lines -->
<!-- -  [x] Bar chart -->
<!-- -  [ ] bar chart lump facet -->
<!-- -  [x] scattter plot -->
<!-- -  [ ] Density plot -->
<!-- -  [ ] geom_point with facet 9x9 grid (ps2 california) -->
<!-- -  [x] Cleveland dot plot -->
<!-- -  [ ] ggparcords -->
<!-- -  [x] parcoords -->
<!-- -  [ ] likert -->
<!-- -  [ ] mosaic -->
<!-- -  [x] alluvium -->

:::




