# Results

Possible 10 Charts based on Problem Set1:

-   [x] hitogram / facets (ps1)
-   boxplot jitter (ps1)
-   with ridgeline (ps1)
-   density lines
-   bar chart lump facet
-   scattter plot
-   Density plot
-   geom_point with facet 9x9 grid (ps2 california)
-   Cleveland dot plot
-   ggparcords
-   parcoords
-   likert
-   mosaic
-   alluvium

Questions trying to solve:

-   What is the concentration data?
-   What are the top 10 positions based on numbers of employees?
-   What are the highest paid positions?
    -   what is the breakdown for regular/overtime/other?
-   what is the paid amount per number of years working at the each agency?
-   what are the lowest paid positions?
-   what is the proportion of moany paid on top of the regular salary?
-   What is the breakdown per location
-   What is the number of employees overtime, versus cost, versus mean?
-   Cost per year, per location -\> likert

<!-- https://data.cityofnewyork.us/City-Government/Citywide-Payroll-Data-Fiscal-Year-/k397-673e/about_data -->
\
\
\
\
\
\
\
\
\
\
\

```{r}
#| echo: false

rm(list = ls())
```

```{r}
#| echo: false
#| message: false
#| warning: false

# Import Libraries
library(tibble)
library(knitr)
library(kableExtra)
library(tidyverse)
library(ggplot2)
library(ggridges)
library(dplyr)
library(visdat)
# library(HH)
library(lubridate)
library(scales)
library(ggalluvial)
```

```{r}
#| echo: false
# Read the data RDS
payroll_data_fire_police <- readRDS("data_source/payroll_data_fire_police.rds")
```

```{r}
#| echo: false
payroll_data_fire_police <-
  payroll_data_fire_police |> 
  mutate(title_description = toupper(title_description)) |> 
  mutate(agency_start_date_year = year(agency_start_date)) |> 
  mutate(total_paid = rowSums(across(c(regular_gross_paid, total_ot_paid, total_other_pay)),na.rm = TRUE))
```


## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 


::: panel-tabset
## Number of Employees

```{r}
#| fig-width: 10
#| fig-height: 6


# Ensure fiscal_year is numeric
summarized_data <- payroll_data_fire_police |> 
  group_by(agency_name, fiscal_year, work_location_borough) |> 
  summarise(
    total_records = n(),
    total_paid = sum(total_paid),
    paid_per_person = sum(total_paid) / n(),
    .groups = "drop"
  ) |> 
  mutate(fiscal_year = as.numeric(fiscal_year))


# Calculate high-water mark and the corresponding year for each facet
high_water_mark_records <- summarized_data |>
  group_by(fiscal_year, agency_name) |>
  summarise(max_records = sum(total_records), .groups = "drop") |>
  group_by(agency_name) |>
  filter(max_records == max(max_records)) |>
  summarise(
    fiscal_year = fiscal_year[1],  # Get the fiscal year for max records
    max_records = max_records[1]  # Get the maximum record count
  )



# Plot
ggplot(summarized_data) +
  geom_col(aes(x = fiscal_year, y = total_records, fill = work_location_borough)) +
  
  # Add horizontal dashed line at high water mark with color mapped to a new variable
  geom_hline(
    data = high_water_mark_records,
    aes(yintercept = max_records, color = "Highest value in 10 years"),  # Map color to legend
    # inherit.aes = FALSE,
    linetype = "dashed"
  ) +
  
  # Add text labels for high water marks
  geom_text(
    data = high_water_mark_records,
    aes(
      x = fiscal_year,
      y = max_records,
      label = paste0("Year: ", fiscal_year, "\n Employees: ", label_comma()(max_records))
    ),
    inherit.aes = FALSE,
    color = "black",
    vjust = -0.5,
    hjust = 1,
    size = 4
  ) +
  
  # Add dots at high water marks
  geom_point(
    data = high_water_mark_records,
    aes(x = fiscal_year, y = max_records),
    inherit.aes = FALSE,
    color = "black",   # Dot color
    size = 3,        # Dot size
    shape = 16       # Circle shape (default)
  ) +
  
  # facet_wrap(~agency_name) 
  facet_wrap(~agency_name) +
  
  # Scale and labels for x-axis
  scale_x_continuous(
    breaks = seq(min(summarized_data$fiscal_year), max(summarized_data$fiscal_year), by = 1),
    labels = function(x) format(as.Date(paste0(x, "-01-01")), "%Y")
  ) +
  
  # Labels for title and axes
  labs(
    title = "Employees by Fiscal Year",
    x = "Fiscal Year",
    y = "Number of Employees",
    fill = "Location:",
    color = "Reference Line:"  # Add a label for the color legend
  ) +
  
  # Y-axis settings
  scale_y_continuous(
    limits = c(0, NA),  # Keep lower bound at 0
    labels = scales::label_number(scale = 1/1000, suffix = "k"),
    expand = expansion(mult = c(0, 0.2))  # Add some padding for aesthetics
  ) +
  
  # Set the colors for the fill based on boroughs
  scale_fill_manual(
    values = c(
      "BRONX" = "#FF595E",
      "BROOKLYN" = "#FFCA3A",
      "MANHATTAN" = "#8AC926",
      "QUEENS" = "#1982C4",
      "RICHMOND" = "#6A4C93"
    )
  ) +
  
  # Set color for high water mark line
  scale_color_manual(
    values = c("Highest value in 10 years" = "black")  # Color the reference line black
  ) +
  
  # Minimal theme
  theme_minimal() +
  theme(
    text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical"  #
  )

```
## Amount Paid per Year

```{r}
#| fig-width: 10
#| fig-height: 6


# Ensure fiscal_year is numeric
summarized_data <- payroll_data_fire_police |> 
  group_by(agency_name, fiscal_year, work_location_borough) |> 
  summarise(
    total_records = n(),
    total_paid = sum(total_paid),
    paid_per_person = sum(total_paid) / n(),
    .groups = "drop"
  ) |> 
  mutate(fiscal_year = as.numeric(fiscal_year))


# Calculate high-water mark and the corresponding year for each facet
high_water_mark_records <- summarized_data |>
  group_by(fiscal_year, agency_name) |>
  summarise(max_records = sum(total_paid), .groups = "drop") |>
  group_by(agency_name) |>
  filter(max_records == max(max_records)) |>
  summarise(
    fiscal_year = fiscal_year[1],  # Get the fiscal year for max records
    max_records = max_records[1]  # Get the maximum record count
  )



# Plot
ggplot(summarized_data) +
  geom_col(aes(x = fiscal_year, y = total_paid, fill = work_location_borough)) +
  
  # Add horizontal dashed line at high water mark with color mapped to a new variable
  geom_hline(
    data = high_water_mark_records,
    aes(yintercept = max_records, color = "Highest value in 10 years"),  # Map color to legend
    # inherit.aes = FALSE,
    linetype = "dashed"
  ) +
  
  # Add text labels for high water marks
  geom_text(
    data = high_water_mark_records,
    aes(
      x = fiscal_year,
      y = max_records,
      label = paste0("Year: ", fiscal_year, "\n Amount Paid: ", label_currency()(max_records/1000000000)," Billions")
    ),
    inherit.aes = FALSE,
    color = "black",
    vjust = -0.5,
    hjust = 1,
    size = 4
  ) +
  
  # Add dots at high water marks
  geom_point(
    data = high_water_mark_records,
    aes(x = fiscal_year, y = max_records),
    inherit.aes = FALSE,
    color = "black",   # Dot color
    size = 3,        # Dot size
    shape = 16       # Circle shape (default)
  ) +
  
  # facet_wrap(~agency_name) 
  facet_wrap(~agency_name) +
  
  # Scale and labels for x-axis
  scale_x_continuous(
    breaks = seq(min(summarized_data$fiscal_year), max(summarized_data$fiscal_year), by = 1),
    labels = function(x) format(as.Date(paste0(x, "-01-01")), "%Y")
  ) +
  
  # Labels for title and axes
  labs(
    title = "Amount Paid to Employees by Fiscal Year",
    x = "Fiscal Year",
    y = "Amount Paid to Employees",
    fill = "Location:",
    color = "Reference Line:"  # Add a label for the color legend
  ) +
  
  # Y-axis settings
  scale_y_continuous(
    limits = c(0, NA),  # Keep lower bound at 0
    labels = scales::label_number(scale = 1/1000000000, suffix = " B"),
    expand = expansion(mult = c(0, 0.2))  # Add some padding for aesthetics
  ) +
  
  # Set the colors for the fill based on boroughs
  scale_fill_manual(
    values = c(
      "BRONX" = "#FF595E",
      "BROOKLYN" = "#FFCA3A",
      "MANHATTAN" = "#8AC926",
      "QUEENS" = "#1982C4",
      "RICHMOND" = "#6A4C93"
    )
  ) +
  
  # Set color for high water mark line
  scale_color_manual(
    values = c("Highest value in 10 years" = "black")  # Color the reference line black
  ) +
  
  # Minimal theme
  theme_minimal() +
  theme(
    text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical"  #
  )

```
:::

\
\

## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 


```{r}
#| fig-width: 9
#| fig-height: 6
#| message: false
#| warning: false

range_band= 50000

payroll_data_fire_police_test <-
payroll_data_fire_police |> 
  filter(fiscal_year == 2024) |>
  # filter(title_description %in% c("POLICE OFFICER","FIREFIGHTER")) |>
  # filter(leave_status_as_of_june_30 == "ACTIVE") |>
   mutate(
    flag_regular = ifelse(regular_gross_paid == 0, "No", "Yes"),
    flag_overtime = ifelse(total_ot_paid == 0, "No", "Yes"),
    flag_other = ifelse(total_other_pay == 0, "No", "Yes")
  ) |> 
    mutate(
    # Define the range for breaks, including the floor of minimum to handle negative values
    total_paid_group = cut(
      total_paid,
      breaks = seq(
        floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
        ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
        by = range_band
      ),
      labels = paste0(
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band - 1) * range_band,
          by = range_band
        ) / 1000,
        "k-",
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band + range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
          by = range_band
        ) / 1000,
        "k"
      ),
      include.lowest = TRUE,
      right = FALSE
    )
  ) |> 
  mutate(
    total_paid_group = recode(
      total_paid_group,
      "-200k--150k" = "Less than 0",
      "-150k--100k" = "Less than 0",
      "-100k--50k" = "Less than 0",
      "-50k-0k" = "Less than 0",
      "0k-50k" = "0k-50k",
      "50k-100k" = "50k-100k",
      "100k-150k" = "100k-150k",
      "150k-200k" = "150k-200k",
      "200k-250k" = "200k-250k",
      "250k-300k" = "250k and above",
      "300k-350k" = "250k and above",
      "350k-400k" = "250k and above",
      "400k-450k" = "250k and above",
      "450k-500k" = "250k and above",
      "500k-550k" = "250k and above",
      "550k-600k" = "250k and above",
      "600k-650k" = "250k and above"
    ),
    total_paid_group = factor(total_paid_group, 
                              levels = c("250k and above", "200k-250k", 
                                         "150k-200k", "100k-150k", "50k-100k", 
                                         "0k-50k", "Less than 0"))
  ) |> 
  mutate(
    flag_regular = factor(flag_regular, levels = c("Yes", "No")),
    flag_overtime = factor(flag_overtime, levels = c("Yes", "No")),
  ) |> 
mutate(
    years_at_agency = 2024 - agency_start_date_year,  # Calculate the years worked
    years_band = case_when(
      years_at_agency >= 0 & years_at_agency <= 5 ~ "0-5 years",
      years_at_agency > 5 & years_at_agency <= 10 ~ "5-10 years",
      years_at_agency > 10 & years_at_agency <= 20 ~ "10-20 years",
      years_at_agency > 20 ~ "20+ years",
      TRUE ~ "Unknown"  # In case of any missing or incorrect data
    ),
    years_band = factor(years_band, levels = c("20+ years", "10-20 years", "5-10 years", "0-5 years"))
  ) |> 
  mutate(total_paid_group_fill = total_paid_group,
years_band_group = years_band)



payroll_data_fire_police_pay_range_frequency <- 
  payroll_data_fire_police_test |> 
  # select(total_paid_group,flag_regular,flag_overtime,flag_other,agency_name,total_paid_group_fill) |> 
  # select(flag_regular,flag_overtime,flag_other,total_paid_group,agency_name,total_paid_group_fill) |>
  # select(work_location_borough,flag_overtime,total_paid_group,agency_name,total_paid_group_fill) |>
select(years_band,total_paid_group,agency_name,total_paid_group_fill,years_band_group,work_location_borough) |>
  group_by(across(everything())) |> 
  summarise(frequency = n(), .groups = 'drop')

# payroll_data_fire_police_pay_range_frequency <-
#   payroll_data_fire_police_pay_range_frequency |> 
#   mutate(total_paid_group_fill = total_paid_group)

essay_grades_frequency_lode = to_lodes_form(payroll_data_fire_police_pay_range_frequency, axes = 1:2)
essay_grades_frequency_lode$x <- factor(essay_grades_frequency_lode$x,
                                        # labels = c(1,                                                   "Total")
)



library(scales)

essay_grades_frequency_lode <- essay_grades_frequency_lode |> 
  mutate(
    stratum_width = ifelse(stratum == "Total", 2, 1) # Replace "LastStratumName" with the actual name
  )

ggplot(essay_grades_frequency_lode, 
       aes(alluvium=alluvium, x=x, stratum=stratum, y=frequency)) +
  # geom_flow(width = 0.5) +
  # geom_alluvium(decreasing = TRUE)+
  geom_alluvium(aes(fill = total_paid_group_fill), alpha = 0.8,
                # width = 0.5
                ) +
  # geom_lode() +
  
  # geom_stratum(color = "#00509d",
  #              fill='white',
  #              linewidth = 1.5,
  #              aes(fill = NA),
  #              alpha = 0.5) +
  geom_stratum(aes(fill = total_paid_group_fill),
               # width = c(0.5,0.5,0.5,2),
               # width = 0.7,
               # width =ifelse(as.character(total_paid_group_fill) == 4, 3, NA),
               # position = "jitter",
               ) +
   geom_label(stat = "stratum", 
              # aes(label = after_stat(stratum)),
              aes(label = ifelse(as.numeric(x) != 2, as.character(stratum), NA) ),
              size =3,
              ) +
  # geom_text(stat = "stratum",
  #           aes(label = paste(after_stat(stratum)
  #                             # ,                              "\n" ,after_stat(count)
  #                             )),
  #            # aes(label = ifelse(as.numeric(x) != 4, as.character(stratum), NA) ),
  #           hjust = 0.5,
  #           size = 3
  #           ) +
  scale_fill_brewer(palette = "Spectral", direction = -1, na.translate = FALSE) +
   scale_x_discrete(                   expand = c(.1, .1)) +
# ggrepel::geom_text_repel(
#   aes(label = ifelse(as.numeric(x) == 2, as.character(stratum), NA) ),
#   stat = "stratum",
#   size = 3, direction = "y", nudge_x = 1.2
# ) +
scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +
  ggrepel::geom_label_repel(
 aes(label = ifelse(as.numeric(x) == 2, as.character(stratum), NA)),
  stat = "stratum",
  size = 3,
  direction = "y",
  nudge_x = .8,
  box.padding = 0.3, # Padding around the text
  label.padding = unit(0.25, "lines"), # Padding inside the box
  label.size = 0.5, # Border thickness
  label.r = unit(0.15, "lines"), # Corner radius of the box
  fill = "white", # Background color for the label
  color = "black" # Text color
) +
  facet_wrap(~ agency_name, scales = "free") +
# facet_wrap(~ work_location_borough, scales = "free_y") +
  # facet_grid(agency_name ~ ., scales = "free") +
# facet_wrap(~ agency_name, scales = "free_y") +
# facet_grid(years_band_group ~ agency_name, scales = "free_y") +
# facet_grid(work_location_borough ~ agency_name, scales = "free_y") +
# work_location_borough
 # facet_wrap(~ years_band_group + agency_name, scales = "free_y") + 
  labs(title = "Student Performance on the Three Essays",
       x = "Essays",
       y = "Number of Students",
       fill="Section") +
  theme_minimal() +
  theme(legend.position = "bottom",
         panel.spacing = unit(3, "lines"),
        legend.direction = "horizontal",
        legend.box = "horizontal", 
        legend.text = element_text(size = 10) ,
        )+
  guides(
    fill = guide_legend(
      nrow = 1,                      # Force legend items into one row
      # keywidth = 1.5, keyheight = 0.5 # Adjust key size for spacing
    )
  )
```



## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 

::: panel-tabset
## Number of Employees

```{r}
#| fig-width: 8
#| fig-height: 11
#| message: false
#| warning: false

payroll_data_fire_police_chart_2 <-
  payroll_data_fire_police |> 
  filter(fiscal_year == 2024) |>
  # filter(title_description %in% c("POLICE OFFICER","FIREFIGHTER")) |>
  # filter(leave_status_as_of_june_30 == "ACTIVE") |>
  mutate(
    flag_regular = ifelse(regular_gross_paid == 0, "No", "Yes"),
    flag_overtime = ifelse(total_ot_paid == 0, "No", "Yes"),
    flag_other = ifelse(total_other_pay == 0, "No", "Yes")
  ) |> 
  mutate(
    # Define the range for breaks, including the floor of minimum to handle negative values
    total_paid_group = cut(
      total_paid,
      breaks = seq(
        floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
        ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
        by = range_band
      ),
      labels = paste0(
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band - 1) * range_band,
          by = range_band
        ) / 1000,
        "k-",
        seq(
          floor(min(total_paid, na.rm = TRUE) / range_band) * range_band + range_band, 
          ceiling(max(total_paid, na.rm = TRUE) / range_band) * range_band,
          by = range_band
        ) / 1000,
        "k"
      ),
      include.lowest = TRUE,
      right = FALSE
    )
  ) |> 
  mutate(
    total_paid_group = recode(
      total_paid_group,
      "-200k--150k" = "Less than 0",
      "-150k--100k" = "Less than 0",
      "-100k--50k" = "Less than 0",
      "-50k-0k" = "Less than 0",
      "0k-50k" = "0k-50k",
      "50k-100k" = "50k-100k",
      "100k-150k" = "100k-150k",
      "150k-200k" = "150k-200k",
      "200k-250k" = "200k-250k",
      "250k-300k" = "250k and above",
      "300k-350k" = "250k and above",
      "350k-400k" = "250k and above",
      "400k-450k" = "250k and above",
      "450k-500k" = "250k and above",
      "500k-550k" = "250k and above",
      "550k-600k" = "250k and above",
      "600k-650k" = "250k and above"
    ),
    total_paid_group = factor(total_paid_group, 
                              levels = c("250k and above", "200k-250k", 
                                         "150k-200k", "100k-150k", "50k-100k", 
                                         "0k-50k", "Less than 0"))
  ) |> 
  mutate(
    flag_regular = factor(flag_regular, levels = c("Yes", "No")),
    flag_overtime = factor(flag_overtime, levels = c("Yes", "No")),
  ) |> 
  mutate(
    years_at_agency = 2024 - agency_start_date_year,  # Calculate the years worked
    years_band = case_when(
      years_at_agency >= 0 & years_at_agency <= 5 ~ "0-5 years",
      years_at_agency > 5 & years_at_agency <= 10 ~ "5-10 years",
      years_at_agency > 10 & years_at_agency <= 20 ~ "10-20 years",
      years_at_agency > 20 ~ "20+ years",
      TRUE ~ "Unknown"  # In case of any missing or incorrect data
    ),
    years_band = factor(years_band, levels = c("20+ years", "10-20 years", "5-10 years", "0-5 years"))
  ) |> 
  mutate(total_paid_group_fill = total_paid_group,
         years_band_group = years_band)


# payroll_data_fire_police_chart_2 |> 
  # filter(total_paid_group == "250k and above") |> 
  # select(title_description) |> distinct() |> pull()



library(parcoords)

title_mapping <- c(
  "EXECUTIVE AGENCY COUNSEL" = "EXEC AGENCY CNSL",
  "COMPUTER SYSTEMS MANAGER" = "COMPUTER SYS MGR",
  "COUNSEL TO THE POLICE COMMISSIONER" = "POLICE CNSL",
  "ADMINISTRATIVE STAFF ANALYST" = "ADMIN STAFF ANALYST",
  "CAPTAIN - CHIEF OF STAFF" = "CAPT - CHIEF STAFF",
  "DEPUTY COMMISSIONER" = "DEPUTY COMM",
  "CAPTAIN DETAILED AS ASSISTANT CHIEF" = "CAPT - ASST CHIEF",
  "CAPTAIN DETAILED AS CHIEF OF TRAINING" = "CAPT - CHIEF TRAINING",
  "COMMISSIONER" = "COMMISSIONER",
  "CAPTAIN DETAILED AS CHIEF OF SPECIAL OPERATIONS" = "CAPT - SPEC OPS CHIEF",
  "CAPTAIN: CHIEF OF TRANSPORTATION BUREAU" = "CAPT - TRANS CHIEF",
  "CAPTAIN DETAILED AS CHIEF OF DETECTIVES" = "CAPT - DET CHIEF",
  "CHIEF OF INFORMATION TECHNOLOGY" = "IT CHIEF",
  "CAPT DET CHIEF OF THE HOUSING BUREAU" = "CAPT DET - HOUSING",
  "CAPT DET CHIEF OF THE TRANSIT BUREAU" = "CAPT DET - TRANSIT",
  "CAPT DET CHIEF OF INTERNAL AFFAIRS" = "CAPT DET - INTERNAL AFF",
  "CAPTAIN DETAILED AS CHIEF OF INTERAGENCY OPERATIONS" = "CAPT - INTERAGENCY OPS",
  "CAPTAIN DETAILED AS CHIEF OF CRIME CONTROL STRATEGIES" = "CAPT - CRIME CTRL",
  "SUPERVISING CHIEF SURGEON" = "CHIEF SURGEON",
  "CAPT DET CHIEF OF DEPARTMENT" = "CAPT DET - DEPT CHIEF",
  "SENIOR STATIONARY ENGINEER" = "SR STAT ENG",
  "CAPTAIN DETAILED AS CHIEF OF PATROL" = "CAPT - PATROL CHIEF",
  "CAPTAIN DETAILED AS CHIEF OF PERSONNEL" = "CAPT - PERS CHIEF",
  "SUPERVISOR OF MECHANICS" = "SUPV MECHANICS",
  "AGENCY ATTORNEY" = "AGENCY ATTY",
  "FIRST DEPUTY COMMISSIONER" = "1ST DEPUTY COMM",
  "POLICE OFFICER" = "POLICE OFFICER",
  "P.O. DA DET GR3" = "P.O. DA DET GR3",
  "P.O. DET SPEC" = "P.O. DET SPEC",
  "LIEUTENANT" = "LIEUTENANT",
  "CAPTAIN" = "CAPTAIN",
  "OILER" = "OILER",
  "SERGEANT-D/A SPECIAL ASSIGNMENT" = "SERG-SPEC ASSIGN",
  "SERGEANT-" = "SERGEANT",
  "POLICE OFFICER D/A DETECTIVE 2ND GR" = "P.O. DET 2ND GR",
  "POLICE OFFICER D/A DETECTIVE 1ST GR" = "P.O. DET 1ST GR",
  "LIEUTENANT D/A SPECIAL ASSIGNMENT" = "LIEUT-SPEC ASSIGN",
  "LIEUTENANT D/A COMMANDER OF DETECTIVE SQUAD" = "LIEUT-DETECT CMD",
  "STATIONARY ENGINEER" = "STAT ENG",
  "CAPTAIN D/A DEPUTY CHIEF" = "CAPT-DEPUTY CHIEF",
  "SERGEANT-D/A SUPERVISOR DETECTIVE SQUAD" = "SERG-DETECT CMD",
  "CAPTAIN D/A INSPECTOR" = "CAPT-INSPECTOR",
  "FIRE MEDICAL OFFICER" = "FIRE MED OFFICER",
  "ADMINISTRATOR OF MEDICAL AFFAIRS" = "ADMIN MED AFFAIRS",
  "DEPUTY ASSISTANT CHIEF OF DEPARTMENT" = "DEP ASST CHIEF",
  "ASSISTANT CHIEF OF DEPARTMENT" = "ASST CHIEF",
  "CHIEF OF DEPARTMENT" = "CHIEF OF DEPT",
  "SUPERVISING EMERGENCY MEDICAL SERVICE SPECIALIST" = "SUPV EMS SPEC",
  "ASSISTANT CHIEF FIRE MARSHAL" = "ASST CHIEF MARSHAL",
  "SUPERVISOR ELECTRICIAN" = "SUPV ELECTRICIAN",
  "CHIEF FIRE MARSHAL" = "CHIEF MARSHAL",
  "FIREFIGHTER" = "FIREFIGHTER",
  "MARINE ENGINEER" = "MARINE ENGINEER",
  "WIPER" = "WIPER",
  "PILOT" = "PILOT",
  "BATTALION CHIEF" = "BATTALION CHIEF",
  "SUPERVISING FIRE MARSHAL" = "SUPV FIRE MARSHAL",
  "FIRE MARSHAL" = "FIRE MARSHAL",
  "DEPUTY CHIEF" = "DEPUTY CHIEF",
  "AUTO MECHANIC" = "AUTO MECHANIC"
)




payroll_data_fire_police_chart_2_250 <-
payroll_data_fire_police_chart_2 |> 
  filter(total_paid_group == "250k and above") |> 
  # filter(total_paid_group == "0k-50k") |> 
  mutate(title_description_short = title_mapping[title_description]) |> 
  mutate(agency_name_order = ifelse(agency_name == "FIRE DEPARTMENT", "ag-002","ag-001"))


# 
# payroll_data_fire_police_chart_2_250 |> 
#   select(title_description_short) |> distinct() |> 
#   arrange(desc(title_description_short)) |> 
#   mutate(order_sequence = paste0("000-",sprintf("%05d", row_number())))

title_order_sequence <- payroll_data_fire_police_chart_2_250 |> 
  select(title_description_short) |> 
  distinct() |> 
  arrange(desc(title_description_short)) |> 
  mutate(order_sequence = paste0("000-", sprintf("%05d", row_number())))

# Perform a left join to add order_sequence
payroll_data_fire_police_chart_2_250 <- payroll_data_fire_police_chart_2_250 |> 
  left_join(title_order_sequence, by = "title_description_short")

title_description_list <- payroll_data_fire_police_chart_2_250 |> 
  select(title_description_short) |> 
  distinct(title_description_short) |> 
  arrange(title_description_short) |> 
  pull(title_description_short)

# View the list
# print(as.character(title_description_list))
  

parcoords(
  payroll_data_fire_police_chart_2_250[, c(
    # "agency_name_order", 
    "order_sequence",
    "agency_name_order", 
    # "title_description_short",
    "regular_gross_paid",
    "total_ot_paid",
    "total_other_pay",
    "total_paid"
  )], 
  rownames = FALSE,
  brushMode = "1D-axes",
  reorderable = TRUE,
  queue = TRUE,
  alpha = 0.25,
  alphaOnBrushed = 0.1,
  height = 750,
  dimensions = list(
    # outliers_rank = list(
    #   title = "outliers_rank",
    #   tickValues = c("High","Not an Outlier","Low")
    # ),
    agency_name_order = list(
      title = "Agency",
      tickValues = c("FIRE","POLICE")
    ),
    order_sequence = list(
      title = "Job Title",
      tickValues = as.character(title_description_list)
    )

  ),
  # color = list(
  #   colorBy = "outliers_rank",  
  #   colorScale = "scaleOrdinal",
  #   colorScheme = outliers_colors
  # ),
   color = list(
    colorBy = "agency_name_order",  
    colorScale = "scaleOrdinal",
    colorScheme = c("#0099CC", "#f94144")
  ),
  withD3 = TRUE,
  margin = list(
    top = 30,    # Adjust top margin
    right = 20,  # Adjust right margin
    bottom = 30, # Adjust bottom margin
    left = 125   # Increase left margin for better spacing
  )
)
```
:::

## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 

```{r}
title_descriptions_top_fire <-
payroll_data_fire_police |>
  filter(fiscal_year == "2024") |>
  filter(leave_status_as_of_june_30 == 'ACTIVE') |>
  group_by(agency_name, title_description) |>
  summarise(
    Total_records = n(),
    .groups = "drop"
  ) |>
  filter(agency_name == 'FIRE DEPARTMENT') |>
  group_by(agency_name) |>
  slice_max(order_by = Total_records, n = 25) |>
  ungroup() |>
  pull(title_description)



title_descriptions_top_police <-
payroll_data_fire_police |>
  filter(fiscal_year == "2024") |>
  filter(leave_status_as_of_june_30 == 'ACTIVE') |>
  group_by(agency_name, title_description) |>
  summarise(
    Total_records = n(),
    .groups = "drop"
  ) |>
  filter(agency_name == 'POLICE DEPARTMENT') |>
  group_by(agency_name) |>
  slice_max(order_by = Total_records, n = 25) |>
  ungroup() |>
  pull(title_description)
```

```{r}
title_short_fire <- c(
  "FIREFIGHTER" = "Firefighter",
    "SUPERVISING EMERGENCY MEDICAL SERVICE SPECIALIST-DPTY CHIEFS" = "Supervising EMS Specialist-Dpty Chiefs",
  "EMERGENCY MEDICAL SPECIALIST-EMT" = "EMS-EMT",
  "LIEUTENANT" = "Lieutenant",
  "EMERGENCY MEDICAL SPECIALIST-PARAMEDIc" = "EMS-Paramedic",
  "SUPERVISING EMERGENCY MEDICAL SERVICE SPECIALIST" = "Supervising EMS Specialist",
  "CAPTAIN" = "Captain",
  "BATTALION CHIEF" = "Battalion Chief",
  "ASSOCIATE FIRE PROTECTION INSPECTOR" = "Assoc. Fire Protection Inspector",
  "FIRE PROTECTION INSPECTOR" = "Fire Protection Inspector",
  "AUTO MECHANIC" = "Auto Mechanic",
  "SUPERVISING FIRE ALARM DISPATCHER" = "Supervising Fire Alarm Dispatcher",
  "FIRE ALARM DISPATCHER" = "Fire Alarm Dispatcher",
  "PRINCIPAL ADMINISTRATIVE ASSOCIATE -  NON SUPVR" = "Principal Admin Assoc-Non Supvr",
  "FIRE MARSHAL" = "Fire Marshal",
  "FIRE CADET" = "Fire Cadet",
  "DEPUTY CHIEF" = "Deputy Chief",
  "CLERICAL ASSOCIATE" = "Clerical Associate",
  "ADM MANAGER-NON-MGRL" = "Admin Manager - Non-Mgr",
  "ADMINISTRATIVE STAFF ANALYST" = "Admin Staff Analyst",

  "COMMUNICATION ELECTRICIAN" = "Communication Electrician",
  "COMPUTER SPECIALIST" = "Computer Specialist",
  "SUPERVISING FIRE ALARM DISPATCHER" = "Supervising Fire Alarm Dispatcher",
  "SUPERVISOR OF MECHANICS" = "Supervisor of Mechanics",
  "CASE - MANAGEMENT NURSE" = "Case-Mgmt Nurse",
  "EMERGENCY MEDICAL SPECIALIST TRAINEE" = "EMS-Trainee"
)

exceptions_proper <- c(
  "\\bDa\\b" = "DA",
  "\\bP\\.o\\.\\b" = "P.O.",
  "P.o.\\s" = "Police Officer ",
  "Ems\\s" = "EMS ",
  "Ems\\-" = "EMS-",
  "Ems-Emt" = "EMS-EMT"
)

```



```{r}
#| fig-width: 8
#| fig-height: 10

payroll_data_fire_police |>
  filter(fiscal_year == "2024") |>
  # filter(leave_status_as_of_june_30 == 'ACTIVE') |>
  # filter(title_description %in% title_descriptions_top10) |>
  # filter(pay_basis == 'per Annum') |>
  filter((agency_name == 'FIRE DEPARTMENT' & title_description %in% title_descriptions_top_fire) |
          (agency_name == 'POLICE DEPARTMENT' & title_description %in% title_descriptions_top_police)  ) |>    mutate(
     title_description = str_replace_all(title_description, title_short_fire)
   ) |>
  # group_by(agency_name, title_description) |>
  mutate(
    title_description = str_to_title(title_description),
    title_description = str_remove(title_description, "-$"),
    title_description = str_replace_all(title_description, exceptions_proper)
  ) |>
  group_by(agency_name, title_description, pay_basis, work_location_borough) |>
  group_by(agency_name, title_description, work_location_borough) |>
  group_by(agency_name, title_description) |>
  # group_by(agency_name, work_location_borough) |>
  summarise(
    Total_records = n(),
    mean_base_salary = mean(base_salary, na.rm = TRUE),
    mean_regular_paid = mean(regular_gross_paid, na.rm = TRUE),
    mean_total_paid = mean(total_paid, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(agency_name, desc(Total_records)) |>
  select('agency_name',
         'title_description',
         'mean_regular_paid' ,
         'mean_total_paid') |>
  # pivot_wider(names_from = tuition_type_factor, values_from = mean_tuition) |>
  mutate(perc_diff = abs(mean_total_paid - mean_regular_paid) / mean_regular_paid * 100) |>
  mutate(perc_diff_band = cut(perc_diff,
                              breaks = c(seq(0, 1000, by = 25), Inf),
                              include.lowest = TRUE)) |>
ggplot() +
  geom_bar(aes(x = -perc_diff *2500,
               y= title_description,
               fill = perc_diff_band),
           stat = 'identity',
           alpha = 1,
  ) +
  geom_text(aes(x = -perc_diff * 2500,
                y = title_description,
                label = paste0(round(perc_diff, 0), "%")),
            hjust = 1.2,
            size = 3,
            color = "black",
            alpha = 0.8,
            check_overlap=TRUE,
  ) +
  geom_point(aes(x = mean_regular_paid,
                 y = reorder(title_description, mean_regular_paid)),
             color = "deepskyblue3",
             size = 1.5,
             stroke=2,
  ) +
  geom_segment(aes(x = 0,
                   xend = mean_regular_paid,
                   y = reorder(title_description, mean_regular_paid,),
                   yend = reorder(title_description, mean_regular_paid)),
               color = "deepskyblue3",
               alpha=1,
  ) +
  geom_text(aes(x = mean_regular_paid,
                y = reorder(title_description, mean_regular_paid),
                label = scales::label_comma()(round(mean_regular_paid, 0))),
            hjust = -0.4,
            size = 3,
            alpha = 0.6,
            check_overlap=TRUE,
  ) +
  facet_grid(fct_infreq(agency_name) ~ .,
             scales ='free_y',
             space = 'free_y') +
  scale_fill_brewer(name = "(Out of State/In State) % Bands",
                    palette = "RdYlGn",
                    direction = -1,
                    na.translate = FALSE) +
  scale_color_brewer(name = "(Out of State/In State) % Bands",
                     palette = "RdYlGn",
                     direction = -1,
                     na.translate = FALSE) +
  scale_x_continuous(
    limits = c(-250000, 250000),
    name = "In State Tuition Fees (dots)",
    labels = function(x) ifelse(x >= 0, scales::label_number()(x), ""),
    sec.axis = sec_axis(~./-2500, name = "% Ratio (bars)",
                        labels = function(x) ifelse(x >= 0,
                                                    paste0(scales::label_number()(x),
                                                           '%'), ""))
  ) +
  labs(title = "Ratio of mean out-of-state to mean in-state tuition VS Mean Tuition by State, Facet by Region",
       y = "State",) +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(color = "darkgray", fill = NA, linewidth = 1),
        axis.title.x = element_text(hjust = 1),
        axis.title.x.top = element_text(hjust = 0)
  )

```



## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 


## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 



## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 



## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 



## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 


## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 



## Who gets the Money?


Lorem ipsum odor amet, consectetuer adipiscing elit. Finibus et dictum egestas scelerisque gravida turpis. Morbi ligula condimentum pulvinar; augue justo lobortis. Class enim nullam parturient montes a porttitor gravida ante dignissim. Congue efficitur curabitur euismod id dolor phasellus. 

Metus tempus nulla in vestibulum iaculis interdum; porta eleifend praesent. Iaculis porttitor adipiscing augue ullamcorper placerat. Pulvinar quam scelerisque ex sem nascetur sit ipsum eros. Magnis luctus facilisis justo massa mauris dictumst. Nibh sollicitudin malesuada vitae maximus cras lacus. 



\
\
\
\
\
\
\
\
\
\
\
\
\

## hitogram / facets (ps1)

## boxplot jitter (ps1)

## with ridgeline (ps1)

## density lines

## bar chart lump facet

## scattter plot

## D3ensity plot

## geom_point with facet 9x9 grid (ps2 california)

## Cleveland dot plot

## ggparcords

## parcoords

## likert

## mosaic

##alluvium

# other
